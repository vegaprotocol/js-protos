/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { uint64, string, int64 } from 'protobuf-codec/decode/types'
import * as _vega_InstrumentConfiguration from './../InstrumentConfiguration/decode.js'
import * as _vega_PriceMonitoringParameters from './../PriceMonitoringParameters/decode.js'
import * as _vega_LiquidityMonitoringParameters from './../LiquidityMonitoringParameters/decode.js'
import * as _vega_SimpleModelParams from './../SimpleModelParams/decode.js'
import * as _vega_LogNormalRiskModel from './../LogNormalRiskModel/decode.js'
import * as _vega_SuccessorConfiguration from './../SuccessorConfiguration/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$instrument = {}
  let field$decimalPlaces = 0n
  const field$metadata = []
  let field$priceMonitoringParameters = {}
  let field$liquidityMonitoringParameters = {}
  let field$positionDecimalPlaces = 0n
  let field$lpPriceRange = ''
  let field$linearSlippageFactor = ''
  let field$quadraticSlippageFactor = ''
  let field$successor = null
  let field$risk_parameters = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$instrument = _vega_InstrumentConfiguration.decode(data)
        break

      case 2:
        field$decimalPlaces = uint64(data)
        break

      case 3:
        field$metadata.push(string(data))
        break

      case 4:
        field$priceMonitoringParameters =
          _vega_PriceMonitoringParameters.decode(data)
        break

      case 5:
        field$liquidityMonitoringParameters =
          _vega_LiquidityMonitoringParameters.decode(data)
        break

      case 100:
        field$risk_parameters = { simple: _vega_SimpleModelParams.decode(data) }
        break

      case 101:
        field$risk_parameters = {
          logNormal: _vega_LogNormalRiskModel.decode(data)
        }
        break

      case 6:
        field$positionDecimalPlaces = int64(data)
        break

      case 8:
        field$lpPriceRange = string(data)
        break

      case 9:
        field$linearSlippageFactor = string(data)
        break

      case 10:
        field$quadraticSlippageFactor = string(data)
        break

      case 11:
        field$successor = _vega_SuccessorConfiguration.decode(data)
        break
    }
  }
  return {
    instrument: field$instrument,
    decimalPlaces: field$decimalPlaces,
    metadata: field$metadata,
    priceMonitoringParameters: field$priceMonitoringParameters,
    liquidityMonitoringParameters: field$liquidityMonitoringParameters,
    positionDecimalPlaces: field$positionDecimalPlaces,
    lpPriceRange: field$lpPriceRange,
    linearSlippageFactor: field$linearSlippageFactor,
    quadraticSlippageFactor: field$quadraticSlippageFactor,
    successor: field$successor,
    risk_parameters: field$risk_parameters
  }
}
