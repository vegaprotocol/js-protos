/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { string } from 'protobuf-codec/decode/types'
import * as _vega_InstrumentMetadata from './../InstrumentMetadata/decode.js'
import * as _vega_Future from './../Future/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = ''
  let field$code = ''
  let field$name = ''
  let field$metadata = {}
  let field$product = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = string(data)
        break

      case 2:
        field$code = string(data)
        break

      case 3:
        field$name = string(data)
        break

      case 4:
        field$metadata = _vega_InstrumentMetadata.decode(data)
        break

      case 100:
        field$product = { future: _vega_Future.decode(data) }
        break
    }
  }
  return {
    id: field$id,
    code: field$code,
    name: field$name,
    metadata: field$metadata,
    product: field$product
  }
}
