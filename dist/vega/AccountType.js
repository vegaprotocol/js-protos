/// autogenerated by protoc-plugin-js
import assert from 'nanoassert'
import { enumerable } from 'protobuf-codec/encode/types'
import { enumerable as decodeEnumerable } from 'protobuf-codec/decode/types'

export const ACCOUNT_TYPE_UNSPECIFIED = 0
export const ACCOUNT_TYPE_INSURANCE = 1
export const ACCOUNT_TYPE_SETTLEMENT = 2
export const ACCOUNT_TYPE_MARGIN = 3
export const ACCOUNT_TYPE_GENERAL = 4
export const ACCOUNT_TYPE_FEES_INFRASTRUCTURE = 5
export const ACCOUNT_TYPE_FEES_LIQUIDITY = 6
export const ACCOUNT_TYPE_FEES_MAKER = 7
export const ACCOUNT_TYPE_BOND = 9
export const ACCOUNT_TYPE_EXTERNAL = 10
export const ACCOUNT_TYPE_GLOBAL_INSURANCE = 11
export const ACCOUNT_TYPE_GLOBAL_REWARD = 12
export const ACCOUNT_TYPE_PENDING_TRANSFERS = 13
export const ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES = 14
export const ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES = 15
export const ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES = 16
export const ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS = 17

const enumValues = new Map([
  [0, 'ACCOUNT_TYPE_UNSPECIFIED'],
  [1, 'ACCOUNT_TYPE_INSURANCE'],
  [2, 'ACCOUNT_TYPE_SETTLEMENT'],
  [3, 'ACCOUNT_TYPE_MARGIN'],
  [4, 'ACCOUNT_TYPE_GENERAL'],
  [5, 'ACCOUNT_TYPE_FEES_INFRASTRUCTURE'],
  [6, 'ACCOUNT_TYPE_FEES_LIQUIDITY'],
  [7, 'ACCOUNT_TYPE_FEES_MAKER'],
  [9, 'ACCOUNT_TYPE_BOND'],
  [10, 'ACCOUNT_TYPE_EXTERNAL'],
  [11, 'ACCOUNT_TYPE_GLOBAL_INSURANCE'],
  [12, 'ACCOUNT_TYPE_GLOBAL_REWARD'],
  [13, 'ACCOUNT_TYPE_PENDING_TRANSFERS'],
  [14, 'ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES'],
  [15, 'ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES'],
  [16, 'ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES'],
  [17, 'ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS']
])
const enumNames = new Map([
  ['ACCOUNT_TYPE_UNSPECIFIED', 0],
  ['ACCOUNT_TYPE_INSURANCE', 1],
  ['ACCOUNT_TYPE_SETTLEMENT', 2],
  ['ACCOUNT_TYPE_MARGIN', 3],
  ['ACCOUNT_TYPE_GENERAL', 4],
  ['ACCOUNT_TYPE_FEES_INFRASTRUCTURE', 5],
  ['ACCOUNT_TYPE_FEES_LIQUIDITY', 6],
  ['ACCOUNT_TYPE_FEES_MAKER', 7],
  ['ACCOUNT_TYPE_BOND', 9],
  ['ACCOUNT_TYPE_EXTERNAL', 10],
  ['ACCOUNT_TYPE_GLOBAL_INSURANCE', 11],
  ['ACCOUNT_TYPE_GLOBAL_REWARD', 12],
  ['ACCOUNT_TYPE_PENDING_TRANSFERS', 13],
  ['ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES', 14],
  ['ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES', 15],
  ['ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES', 16],
  ['ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS', 17]
])

export function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid AccountType value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

export function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

export function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid AccountType value (' + value + ')')

  if (0 <= value && value <= 17) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
export function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
export function parse(str) {
  return enumNames.get(str)
}
