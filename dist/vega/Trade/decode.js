/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint64, int64 } = require('protobuf-codec/decode/types')
const _vega_Side = require('./../Side.js')
const _vega_Trade_Type = require('./Type.js')
const _vega_Fee = require('./../Fee/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$id = ''
  let field$marketId = ''
  let field$price = ''
  let field$size = 0n
  let field$buyer = ''
  let field$seller = ''
  let field$aggressor = 0
  let field$buyOrder = ''
  let field$sellOrder = ''
  let field$timestamp = 0n
  let field$type = 0
  let field$buyerFee = {}
  let field$sellerFee = {}
  let field$buyerAuctionBatch = 0n
  let field$sellerAuctionBatch = 0n
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = string(data)
        break

      case 2:
        field$marketId = string(data)
        break

      case 3:
        field$price = string(data)
        break

      case 4:
        field$size = uint64(data)
        break

      case 5:
        field$buyer = string(data)
        break

      case 6:
        field$seller = string(data)
        break

      case 7:
        field$aggressor = _vega_Side.decode(data)
        break

      case 8:
        field$buyOrder = string(data)
        break

      case 9:
        field$sellOrder = string(data)
        break

      case 10:
        field$timestamp = int64(data)
        break

      case 11:
        field$type = _vega_Trade_Type.decode(data)
        break

      case 12:
        field$buyerFee = _vega_Fee.decode(data)
        break

      case 13:
        field$sellerFee = _vega_Fee.decode(data)
        break

      case 14:
        field$buyerAuctionBatch = uint64(data)
        break

      case 15:
        field$sellerAuctionBatch = uint64(data)
        break
    }
  }
  return {
    id: field$id,
    marketId: field$marketId,
    price: field$price,
    size: field$size,
    buyer: field$buyer,
    seller: field$seller,
    aggressor: field$aggressor,
    buyOrder: field$buyOrder,
    sellOrder: field$sellOrder,
    timestamp: field$timestamp,
    type: field$type,
    buyerFee: field$buyerFee,
    sellerFee: field$sellerFee,
    buyerAuctionBatch: field$buyerAuctionBatch,
    sellerAuctionBatch: field$sellerAuctionBatch
  }
}
