/// autogenerated by protoc-plugin-js
import assert from 'nanoassert'
import { enumerable } from 'protobuf-codec/encode/types'
import { enumerable as decodeEnumerable } from 'protobuf-codec/decode/types'

export const STATE_UNSPECIFIED = 0
export const STATE_PROPOSED = 1
export const STATE_REJECTED = 2
export const STATE_PENDING = 3
export const STATE_CANCELLED = 4
export const STATE_ACTIVE = 5
export const STATE_SUSPENDED = 6
export const STATE_CLOSED = 7
export const STATE_TRADING_TERMINATED = 8
export const STATE_SETTLED = 9

const enumValues = new Map([
  [0, 'STATE_UNSPECIFIED'],
  [1, 'STATE_PROPOSED'],
  [2, 'STATE_REJECTED'],
  [3, 'STATE_PENDING'],
  [4, 'STATE_CANCELLED'],
  [5, 'STATE_ACTIVE'],
  [6, 'STATE_SUSPENDED'],
  [7, 'STATE_CLOSED'],
  [8, 'STATE_TRADING_TERMINATED'],
  [9, 'STATE_SETTLED']
])
const enumNames = new Map([
  ['STATE_UNSPECIFIED', 0],
  ['STATE_PROPOSED', 1],
  ['STATE_REJECTED', 2],
  ['STATE_PENDING', 3],
  ['STATE_CANCELLED', 4],
  ['STATE_ACTIVE', 5],
  ['STATE_SUSPENDED', 6],
  ['STATE_CLOSED', 7],
  ['STATE_TRADING_TERMINATED', 8],
  ['STATE_SETTLED', 9]
])

export function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid State value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

export function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

export function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid State value (' + value + ')')

  if (0 <= value && value <= 9) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
export function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
export function parse(str) {
  return enumNames.get(str)
}
