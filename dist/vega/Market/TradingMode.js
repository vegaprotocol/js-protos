/// autogenerated by protoc-plugin-js
import assert from 'nanoassert'
import { enumerable } from 'protobuf-codec/encode/types.js'
import { enumerable as decodeEnumerable } from 'protobuf-codec/decode/types.js'

export const TRADING_MODE_UNSPECIFIED = 0
export const TRADING_MODE_CONTINUOUS = 1
export const TRADING_MODE_BATCH_AUCTION = 2
export const TRADING_MODE_OPENING_AUCTION = 3
export const TRADING_MODE_MONITORING_AUCTION = 4
export const TRADING_MODE_NO_TRADING = 5

const enumValues = new Map([
  [0, 'TRADING_MODE_UNSPECIFIED'],
  [1, 'TRADING_MODE_CONTINUOUS'],
  [2, 'TRADING_MODE_BATCH_AUCTION'],
  [3, 'TRADING_MODE_OPENING_AUCTION'],
  [4, 'TRADING_MODE_MONITORING_AUCTION'],
  [5, 'TRADING_MODE_NO_TRADING']
])
const enumNames = new Map([
  ['TRADING_MODE_UNSPECIFIED', 0],
  ['TRADING_MODE_CONTINUOUS', 1],
  ['TRADING_MODE_BATCH_AUCTION', 2],
  ['TRADING_MODE_OPENING_AUCTION', 3],
  ['TRADING_MODE_MONITORING_AUCTION', 4],
  ['TRADING_MODE_NO_TRADING', 5]
])

export function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid TradingMode value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

export function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

export function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid TradingMode value (' + value + ')')

  if (0 <= value && value <= 5) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
export function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
export function parse(str) {
  return enumNames.get(str)
}
