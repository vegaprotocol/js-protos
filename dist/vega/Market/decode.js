/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { string, uint64, int64 } from 'protobuf-codec/decode/types'
import * as _vega_TradableInstrument from './../TradableInstrument/decode.js'
import * as _vega_Fees from './../Fees/decode.js'
import * as _vega_AuctionDuration from './../AuctionDuration/decode.js'
import * as _vega_PriceMonitoringSettings from './../PriceMonitoringSettings/decode.js'
import * as _vega_LiquidityMonitoringParameters from './../LiquidityMonitoringParameters/decode.js'
import * as _vega_Market_TradingMode from './TradingMode.js'
import * as _vega_Market_State from './State.js'
import * as _vega_MarketTimestamps from './../MarketTimestamps/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = ''
  let field$tradableInstrument = {}
  let field$decimalPlaces = 0n
  let field$fees = {}
  let field$openingAuction = {}
  let field$priceMonitoringSettings = {}
  let field$liquidityMonitoringParameters = {}
  let field$tradingMode = 0
  let field$state = 0
  let field$marketTimestamps = {}
  let field$positionDecimalPlaces = 0n
  let field$lpPriceRange = ''
  let field$linearSlippageFactor = ''
  let field$quadraticSlippageFactor = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = string(data)
        break

      case 2:
        field$tradableInstrument = _vega_TradableInstrument.decode(data)
        break

      case 3:
        field$decimalPlaces = uint64(data)
        break

      case 4:
        field$fees = _vega_Fees.decode(data)
        break

      case 5:
        field$openingAuction = _vega_AuctionDuration.decode(data)
        break

      case 6:
        field$priceMonitoringSettings =
          _vega_PriceMonitoringSettings.decode(data)
        break

      case 7:
        field$liquidityMonitoringParameters =
          _vega_LiquidityMonitoringParameters.decode(data)
        break

      case 8:
        field$tradingMode = _vega_Market_TradingMode.decode(data)
        break

      case 9:
        field$state = _vega_Market_State.decode(data)
        break

      case 10:
        field$marketTimestamps = _vega_MarketTimestamps.decode(data)
        break

      case 11:
        field$positionDecimalPlaces = int64(data)
        break

      case 12:
        field$lpPriceRange = string(data)
        break

      case 13:
        field$linearSlippageFactor = string(data)
        break

      case 14:
        field$quadraticSlippageFactor = string(data)
        break
    }
  }
  return {
    id: field$id,
    tradableInstrument: field$tradableInstrument,
    decimalPlaces: field$decimalPlaces,
    fees: field$fees,
    openingAuction: field$openingAuction,
    priceMonitoringSettings: field$priceMonitoringSettings,
    liquidityMonitoringParameters: field$liquidityMonitoringParameters,
    tradingMode: field$tradingMode,
    state: field$state,
    marketTimestamps: field$marketTimestamps,
    positionDecimalPlaces: field$positionDecimalPlaces,
    lpPriceRange: field$lpPriceRange,
    linearSlippageFactor: field$linearSlippageFactor,
    quadraticSlippageFactor: field$quadraticSlippageFactor
  }
}
