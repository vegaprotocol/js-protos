/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')

const _vega_Instrument = require('./../Instrument/decode.js')
const _vega_MarginCalculator = require('./../MarginCalculator/decode.js')
const _vega_LogNormalRiskModel = require('./../LogNormalRiskModel/decode.js')
const _vega_SimpleRiskModel = require('./../SimpleRiskModel/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$instrument = {}
  let field$marginCalculator = {}
  let field$risk_model = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$instrument = _vega_Instrument.decode(data)
        break

      case 2:
        field$marginCalculator = _vega_MarginCalculator.decode(data)
        break

      case 100:
        field$risk_model = {
          logNormalRiskModel: _vega_LogNormalRiskModel.decode(data)
        }
        break

      case 101:
        field$risk_model = {
          simpleRiskModel: _vega_SimpleRiskModel.decode(data)
        }
        break
    }
  }
  return {
    instrument: field$instrument,
    marginCalculator: field$marginCalculator,
    risk_model: field$risk_model
  }
}
