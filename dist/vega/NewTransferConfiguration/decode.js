/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { string } from 'protobuf-codec/decode/types'
import * as _vega_AccountType from './../AccountType.js'
import * as _vega_GovernanceTransferType from './../GovernanceTransferType.js'
import * as _vega_OneOffTransfer from './../OneOffTransfer/decode.js'
import * as _vega_RecurringTransfer from './../RecurringTransfer/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$sourceType = 0
  let field$source = ''
  let field$transferType = 0
  let field$amount = ''
  let field$asset = ''
  let field$fractionOfBalance = ''
  let field$destinationType = 0
  let field$destination = ''
  let field$kind = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$sourceType = _vega_AccountType.decode(data)
        break

      case 2:
        field$source = string(data)
        break

      case 3:
        field$transferType = _vega_GovernanceTransferType.decode(data)
        break

      case 4:
        field$amount = string(data)
        break

      case 5:
        field$asset = string(data)
        break

      case 6:
        field$fractionOfBalance = string(data)
        break

      case 7:
        field$destinationType = _vega_AccountType.decode(data)
        break

      case 8:
        field$destination = string(data)
        break

      case 101:
        field$kind = { oneOff: _vega_OneOffTransfer.decode(data) }
        break

      case 102:
        field$kind = { recurring: _vega_RecurringTransfer.decode(data) }
        break
    }
  }
  return {
    sourceType: field$sourceType,
    source: field$source,
    transferType: field$transferType,
    amount: field$amount,
    asset: field$asset,
    fractionOfBalance: field$fractionOfBalance,
    destinationType: field$destinationType,
    destination: field$destination,
    kind: field$kind
  }
}
