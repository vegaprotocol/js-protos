/// autogenerated by protoc-plugin-js
import assert from 'nanoassert'
import { enumerable } from 'protobuf-codec/encode/types.js'
import { enumerable as decodeEnumerable } from 'protobuf-codec/decode/types.js'

export const NODE_STATUS_UNSPECIFIED = 0
export const NODE_STATUS_VALIDATOR = 1
export const NODE_STATUS_NON_VALIDATOR = 2

const enumValues = new Map([
  [0, 'NODE_STATUS_UNSPECIFIED'],
  [1, 'NODE_STATUS_VALIDATOR'],
  [2, 'NODE_STATUS_NON_VALIDATOR']
])
const enumNames = new Map([
  ['NODE_STATUS_UNSPECIFIED', 0],
  ['NODE_STATUS_VALIDATOR', 1],
  ['NODE_STATUS_NON_VALIDATOR', 2]
])

export function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid NodeStatus value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

export function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

export function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid NodeStatus value (' + value + ')')

  if (0 <= value && value <= 2) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
export function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
export function parse(str) {
  return enumNames.get(str)
}
