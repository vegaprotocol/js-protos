/// autogenerated by protoc-plugin-js
import Writer from 'protobuf-codec/encode/writer'
import { string, uint64 } from 'protobuf-codec/encode/types'
import * as _vega_BuiltinAssetEvent from './../../../BuiltinAssetEvent/encode.js'
import * as _vega_ERC20Event from './../../../ERC20Event/encode.js'
import * as _vega_StakingEvent from './../../../StakingEvent/encode.js'
import * as _vega_ERC20MultiSigEvent from './../../../ERC20MultiSigEvent/encode.js'

export function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer()

  if (obj.txId) writer.bytes(1, obj.txId, string)
  if (obj.nonce) writer.varint(2, obj.nonce, uint64)

  if (obj.event) {
    const _o = obj.event
    if (_o.builtin)
      writer.bytes(1001, _vega_BuiltinAssetEvent.encode(_o.builtin))
    if (_o.erc20) writer.bytes(1002, _vega_ERC20Event.encode(_o.erc20))
    if (_o.stakingEvent)
      writer.bytes(1005, _vega_StakingEvent.encode(_o.stakingEvent))
    if (_o.erc20Multisig)
      writer.bytes(1006, _vega_ERC20MultiSigEvent.encode(_o.erc20Multisig))
  }

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }
