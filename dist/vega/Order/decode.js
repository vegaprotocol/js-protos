/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint64, int64, bool } = require('protobuf-codec/decode/types')
const _vega_Side = require('./../Side.js')
const _vega_Order_TimeInForce = require('./TimeInForce.js')
const _vega_Order_Type = require('./Type.js')
const _vega_Order_Status = require('./Status.js')
const _vega_OrderError = require('./../OrderError.js')
const _vega_PeggedOrder = require('./../PeggedOrder/decode.js')
const _vega_IcebergOrder = require('./../IcebergOrder/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$id = ''
  let field$marketId = ''
  let field$partyId = ''
  let field$side = 0
  let field$price = ''
  let field$size = 0n
  let field$remaining = 0n
  let field$timeInForce = 0
  let field$type = 0
  let field$createdAt = 0n
  let field$status = 0
  let field$expiresAt = 0n
  let field$reference = ''
  let field$reason = null
  let field$updatedAt = 0n
  let field$version = 0n
  let field$batchId = 0n
  let field$peggedOrder = {}
  let field$liquidityProvisionId = ''
  let field$postOnly = false
  let field$reduceOnly = false
  let field$icebergOrder = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = string(data)
        break

      case 2:
        field$marketId = string(data)
        break

      case 3:
        field$partyId = string(data)
        break

      case 4:
        field$side = _vega_Side.decode(data)
        break

      case 5:
        field$price = string(data)
        break

      case 6:
        field$size = uint64(data)
        break

      case 7:
        field$remaining = uint64(data)
        break

      case 8:
        field$timeInForce = _vega_Order_TimeInForce.decode(data)
        break

      case 9:
        field$type = _vega_Order_Type.decode(data)
        break

      case 10:
        field$createdAt = int64(data)
        break

      case 11:
        field$status = _vega_Order_Status.decode(data)
        break

      case 12:
        field$expiresAt = int64(data)
        break

      case 13:
        field$reference = string(data)
        break

      case 14:
        field$reason = _vega_OrderError.decode(data)
        break

      case 15:
        field$updatedAt = int64(data)
        break

      case 16:
        field$version = uint64(data)
        break

      case 17:
        field$batchId = uint64(data)
        break

      case 18:
        field$peggedOrder = _vega_PeggedOrder.decode(data)
        break

      case 19:
        field$liquidityProvisionId = string(data)
        break

      case 20:
        field$postOnly = bool(data)
        break

      case 21:
        field$reduceOnly = bool(data)
        break

      case 22:
        field$icebergOrder = _vega_IcebergOrder.decode(data)
        break
    }
  }
  return {
    id: field$id,
    marketId: field$marketId,
    partyId: field$partyId,
    side: field$side,
    price: field$price,
    size: field$size,
    remaining: field$remaining,
    timeInForce: field$timeInForce,
    type: field$type,
    createdAt: field$createdAt,
    status: field$status,
    expiresAt: field$expiresAt,
    reference: field$reference,
    reason: field$reason,
    updatedAt: field$updatedAt,
    version: field$version,
    batchId: field$batchId,
    peggedOrder: field$peggedOrder,
    liquidityProvisionId: field$liquidityProvisionId,
    postOnly: field$postOnly,
    reduceOnly: field$reduceOnly,
    icebergOrder: field$icebergOrder
  }
}
