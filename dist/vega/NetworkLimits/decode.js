/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { bool, int64 } from 'protobuf-codec/decode/types'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$canProposeMarket = false
  let field$canProposeAsset = false
  let field$proposeMarketEnabled = false
  let field$proposeAssetEnabled = false
  let field$genesisLoaded = false
  let field$proposeMarketEnabledFrom = 0n
  let field$proposeAssetEnabledFrom = 0n
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$canProposeMarket = bool(data)
        break

      case 2:
        field$canProposeAsset = bool(data)
        break

      case 4:
        field$proposeMarketEnabled = bool(data)
        break

      case 5:
        field$proposeAssetEnabled = bool(data)
        break

      case 7:
        field$genesisLoaded = bool(data)
        break

      case 8:
        field$proposeMarketEnabledFrom = int64(data)
        break

      case 9:
        field$proposeAssetEnabledFrom = int64(data)
        break
    }
  }
  return {
    canProposeMarket: field$canProposeMarket,
    canProposeAsset: field$canProposeAsset,
    proposeMarketEnabled: field$proposeMarketEnabled,
    proposeAssetEnabled: field$proposeAssetEnabled,
    genesisLoaded: field$genesisLoaded,
    proposeMarketEnabledFrom: field$proposeMarketEnabledFrom,
    proposeAssetEnabledFrom: field$proposeAssetEnabledFrom
  }
}
