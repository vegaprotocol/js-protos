/// autogenerated by protoc-plugin-js
import assert from 'nanoassert'
import { enumerable } from 'protobuf-codec/encode/types'
import { enumerable as decodeEnumerable } from 'protobuf-codec/decode/types'

export const TRANSFER_TYPE_UNSPECIFIED = 0
export const TRANSFER_TYPE_LOSS = 1
export const TRANSFER_TYPE_WIN = 2
export const TRANSFER_TYPE_MTM_LOSS = 4
export const TRANSFER_TYPE_MTM_WIN = 5
export const TRANSFER_TYPE_MARGIN_LOW = 6
export const TRANSFER_TYPE_MARGIN_HIGH = 7
export const TRANSFER_TYPE_MARGIN_CONFISCATED = 8
export const TRANSFER_TYPE_MAKER_FEE_PAY = 9
export const TRANSFER_TYPE_MAKER_FEE_RECEIVE = 10
export const TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = 11
export const TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE = 12
export const TRANSFER_TYPE_LIQUIDITY_FEE_PAY = 13
export const TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE = 14
export const TRANSFER_TYPE_BOND_LOW = 15
export const TRANSFER_TYPE_BOND_HIGH = 16
export const TRANSFER_TYPE_WITHDRAW = 18
export const TRANSFER_TYPE_DEPOSIT = 19
export const TRANSFER_TYPE_BOND_SLASHING = 20
export const TRANSFER_TYPE_REWARD_PAYOUT = 21
export const TRANSFER_TYPE_TRANSFER_FUNDS_SEND = 22
export const TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE = 23
export const TRANSFER_TYPE_CLEAR_ACCOUNT = 24
export const TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE = 25
export const TRANSFER_TYPE_SPOT = 26
export const TRANSFER_TYPE_HOLDING_LOCK = 27
export const TRANSFER_TYPE_HOLDING_RELEASE = 28
export const TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION = 29
export const TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE = 30
export const TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE = 31
export const TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY = 32
export const TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY = 33
export const TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT = 34
export const TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE = 35

const enumValues = new Map([
  [0, 'TRANSFER_TYPE_UNSPECIFIED'],
  [1, 'TRANSFER_TYPE_LOSS'],
  [2, 'TRANSFER_TYPE_WIN'],
  [4, 'TRANSFER_TYPE_MTM_LOSS'],
  [5, 'TRANSFER_TYPE_MTM_WIN'],
  [6, 'TRANSFER_TYPE_MARGIN_LOW'],
  [7, 'TRANSFER_TYPE_MARGIN_HIGH'],
  [8, 'TRANSFER_TYPE_MARGIN_CONFISCATED'],
  [9, 'TRANSFER_TYPE_MAKER_FEE_PAY'],
  [10, 'TRANSFER_TYPE_MAKER_FEE_RECEIVE'],
  [11, 'TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY'],
  [12, 'TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE'],
  [13, 'TRANSFER_TYPE_LIQUIDITY_FEE_PAY'],
  [14, 'TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE'],
  [15, 'TRANSFER_TYPE_BOND_LOW'],
  [16, 'TRANSFER_TYPE_BOND_HIGH'],
  [18, 'TRANSFER_TYPE_WITHDRAW'],
  [19, 'TRANSFER_TYPE_DEPOSIT'],
  [20, 'TRANSFER_TYPE_BOND_SLASHING'],
  [21, 'TRANSFER_TYPE_REWARD_PAYOUT'],
  [22, 'TRANSFER_TYPE_TRANSFER_FUNDS_SEND'],
  [23, 'TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE'],
  [24, 'TRANSFER_TYPE_CLEAR_ACCOUNT'],
  [25, 'TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE'],
  [26, 'TRANSFER_TYPE_SPOT'],
  [27, 'TRANSFER_TYPE_HOLDING_LOCK'],
  [28, 'TRANSFER_TYPE_HOLDING_RELEASE'],
  [29, 'TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION'],
  [30, 'TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE'],
  [31, 'TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE'],
  [32, 'TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY'],
  [33, 'TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY'],
  [34, 'TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT'],
  [35, 'TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE']
])
const enumNames = new Map([
  ['TRANSFER_TYPE_UNSPECIFIED', 0],
  ['TRANSFER_TYPE_LOSS', 1],
  ['TRANSFER_TYPE_WIN', 2],
  ['TRANSFER_TYPE_MTM_LOSS', 4],
  ['TRANSFER_TYPE_MTM_WIN', 5],
  ['TRANSFER_TYPE_MARGIN_LOW', 6],
  ['TRANSFER_TYPE_MARGIN_HIGH', 7],
  ['TRANSFER_TYPE_MARGIN_CONFISCATED', 8],
  ['TRANSFER_TYPE_MAKER_FEE_PAY', 9],
  ['TRANSFER_TYPE_MAKER_FEE_RECEIVE', 10],
  ['TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY', 11],
  ['TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE', 12],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_PAY', 13],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE', 14],
  ['TRANSFER_TYPE_BOND_LOW', 15],
  ['TRANSFER_TYPE_BOND_HIGH', 16],
  ['TRANSFER_TYPE_WITHDRAW', 18],
  ['TRANSFER_TYPE_DEPOSIT', 19],
  ['TRANSFER_TYPE_BOND_SLASHING', 20],
  ['TRANSFER_TYPE_REWARD_PAYOUT', 21],
  ['TRANSFER_TYPE_TRANSFER_FUNDS_SEND', 22],
  ['TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE', 23],
  ['TRANSFER_TYPE_CLEAR_ACCOUNT', 24],
  ['TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE', 25],
  ['TRANSFER_TYPE_SPOT', 26],
  ['TRANSFER_TYPE_HOLDING_LOCK', 27],
  ['TRANSFER_TYPE_HOLDING_RELEASE', 28],
  ['TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION', 29],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE', 30],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE', 31],
  ['TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY', 32],
  ['TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY', 33],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT', 34],
  ['TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE', 35]
])

export function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid TransferType value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

export function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

export function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid TransferType value (' + value + ')')

  if (0 <= value && value <= 35) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
export function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
export function parse(str) {
  return enumNames.get(str)
}
