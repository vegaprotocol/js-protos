/// autogenerated by protoc-plugin-js
const Writer = require('protobuf-codec/encode/writer')
const { string } = require('protobuf-codec/encode/types')
const _vega_EpochData = require('./../EpochData/encode.js')
const _vega_NodeStatus = require('./../NodeStatus.js')
const _vega_Delegation = require('./../Delegation/encode.js')
const _vega_RewardScore = require('./../RewardScore/encode.js')
const _vega_RankingScore = require('./../RankingScore/encode.js')

exports.encode = function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer()

  if (obj.id) writer.bytes(1, obj.id, string)
  if (obj.pubKey) writer.bytes(2, obj.pubKey, string)
  if (obj.tmPubKey) writer.bytes(3, obj.tmPubKey, string)
  if (obj.ethereumAddress) writer.bytes(4, obj.ethereumAddress, string)
  if (obj.infoUrl) writer.bytes(5, obj.infoUrl, string)
  if (obj.location) writer.bytes(6, obj.location, string)
  if (obj.stakedByOperator) writer.bytes(7, obj.stakedByOperator, string)
  if (obj.stakedByDelegates) writer.bytes(8, obj.stakedByDelegates, string)
  if (obj.stakedTotal) writer.bytes(9, obj.stakedTotal, string)
  if (obj.maxIntendedStake) writer.bytes(10, obj.maxIntendedStake, string)
  if (obj.pendingStake) writer.bytes(11, obj.pendingStake, string)
  if (obj.epochData) writer.bytes(12, _vega_EpochData.encode(obj.epochData))
  if (obj.status) writer.varint(13, obj.status, _vega_NodeStatus)
  if (obj.delegations?.length)
    obj.delegations.forEach((v) => writer.bytes(14, _vega_Delegation.encode(v)))
  if (obj.rewardScore)
    writer.bytes(15, _vega_RewardScore.encode(obj.rewardScore))
  if (obj.rankingScore)
    writer.bytes(16, _vega_RankingScore.encode(obj.rankingScore))
  if (obj.name) writer.bytes(17, obj.name, string)
  if (obj.avatarUrl) writer.bytes(18, obj.avatarUrl, string)

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }
