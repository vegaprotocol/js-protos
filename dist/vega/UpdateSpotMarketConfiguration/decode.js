/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { string } from 'protobuf-codec/decode/types'
import * as _vega_PriceMonitoringParameters from './../PriceMonitoringParameters/decode.js'
import * as _vega_TargetStakeParameters from './../TargetStakeParameters/decode.js'
import * as _vega_SimpleModelParams from './../SimpleModelParams/decode.js'
import * as _vega_LogNormalRiskModel from './../LogNormalRiskModel/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  const field$metadata = []
  let field$priceMonitoringParameters = {}
  let field$targetStakeParameters = {}
  let field$risk_parameters = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$metadata.push(string(data))
        break

      case 2:
        field$priceMonitoringParameters =
          _vega_PriceMonitoringParameters.decode(data)
        break

      case 3:
        field$targetStakeParameters = _vega_TargetStakeParameters.decode(data)
        break

      case 100:
        field$risk_parameters = { simple: _vega_SimpleModelParams.decode(data) }
        break

      case 101:
        field$risk_parameters = {
          logNormal: _vega_LogNormalRiskModel.decode(data)
        }
        break
    }
  }
  return {
    metadata: field$metadata,
    priceMonitoringParameters: field$priceMonitoringParameters,
    targetStakeParameters: field$targetStakeParameters,
    risk_parameters: field$risk_parameters
  }
}
