/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { uint64 } from 'protobuf-codec/decode/types'
import * as _vega_ERC20SignerAdded from './../ERC20SignerAdded/decode.js'
import * as _vega_ERC20SignerRemoved from './../ERC20SignerRemoved/decode.js'
import * as _vega_ERC20ThresholdSet from './../ERC20ThresholdSet/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$index = 0n
  let field$block = 0n
  let field$action = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$index = uint64(data)
        break

      case 2:
        field$block = uint64(data)
        break

      case 1001:
        field$action = { signerAdded: _vega_ERC20SignerAdded.decode(data) }
        break

      case 1002:
        field$action = { signerRemoved: _vega_ERC20SignerRemoved.decode(data) }
        break

      case 1003:
        field$action = { thresholdSet: _vega_ERC20ThresholdSet.decode(data) }
        break
    }
  }
  return { index: field$index, block: field$block, action: field$action }
}
