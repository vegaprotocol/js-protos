/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { uint64, bool } from 'protobuf-codec/decode/types'
import * as _vega_ERC20AssetList from './../ERC20AssetList/decode.js'
import * as _vega_ERC20AssetDelist from './../ERC20AssetDelist/decode.js'
import * as _vega_ERC20Deposit from './../ERC20Deposit/decode.js'
import * as _vega_ERC20Withdrawal from './../ERC20Withdrawal/decode.js'
import * as _vega_ERC20AssetLimitsUpdated from './../ERC20AssetLimitsUpdated/decode.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$index = 0n
  let field$block = 0n
  let field$action = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$index = uint64(data)
        break

      case 2:
        field$block = uint64(data)
        break

      case 1001:
        field$action = { assetList: _vega_ERC20AssetList.decode(data) }
        break

      case 1002:
        field$action = { assetDelist: _vega_ERC20AssetDelist.decode(data) }
        break

      case 1003:
        field$action = { deposit: _vega_ERC20Deposit.decode(data) }
        break

      case 1004:
        field$action = { withdrawal: _vega_ERC20Withdrawal.decode(data) }
        break

      case 1005:
        field$action = {
          assetLimitsUpdated: _vega_ERC20AssetLimitsUpdated.decode(data)
        }
        break

      case 1006:
        field$action = { bridgeStopped: bool(data) }
        break

      case 1007:
        field$action = { bridgeResumed: bool(data) }
        break
    }
  }
  return { index: field$index, block: field$block, action: field$action }
}
