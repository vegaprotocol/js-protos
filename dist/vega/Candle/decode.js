/// autogenerated by protoc-plugin-js
import reader from 'protobuf-codec/decode/reader'
import { int64, string, uint64 } from 'protobuf-codec/decode/types'
import * as _vega_Interval from './../Interval.js'

export function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$timestamp = 0n
  let field$datetime = ''
  let field$high = ''
  let field$low = ''
  let field$open = ''
  let field$close = ''
  let field$volume = 0n
  let field$interval = 0
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$timestamp = int64(data)
        break

      case 2:
        field$datetime = string(data)
        break

      case 3:
        field$high = string(data)
        break

      case 4:
        field$low = string(data)
        break

      case 5:
        field$open = string(data)
        break

      case 6:
        field$close = string(data)
        break

      case 7:
        field$volume = uint64(data)
        break

      case 8:
        field$interval = _vega_Interval.decode(data)
        break
    }
  }
  return {
    timestamp: field$timestamp,
    datetime: field$datetime,
    high: field$high,
    low: field$low,
    open: field$open,
    close: field$close,
    volume: field$volume,
    interval: field$interval
  }
}
