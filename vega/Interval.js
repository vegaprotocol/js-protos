/// autogenerated by protoc-plugin-js
const assert = require('nanoassert')
const { enumerable } = require('protobuf-codec/encode/types')
const { enumerable: decodeEnumerable } = require('protobuf-codec/decode/types')

const INTERVAL_UNSPECIFIED = 0
const INTERVAL_BLOCK = -1
const INTERVAL_I1M = 60
const INTERVAL_I5M = 300
const INTERVAL_I15M = 900
const INTERVAL_I1H = 3600
const INTERVAL_I6H = 21600
const INTERVAL_I1D = 86400

const enumValues = new Map([
  [0, 'INTERVAL_UNSPECIFIED'],
  [-1, 'INTERVAL_BLOCK'],
  [60, 'INTERVAL_I1M'],
  [300, 'INTERVAL_I5M'],
  [900, 'INTERVAL_I15M'],
  [3600, 'INTERVAL_I1H'],
  [21600, 'INTERVAL_I6H'],
  [86400, 'INTERVAL_I1D']
])
const enumNames = new Map([
  ['INTERVAL_UNSPECIFIED', 0],
  ['INTERVAL_BLOCK', -1],
  ['INTERVAL_I1M', 60],
  ['INTERVAL_I5M', 300],
  ['INTERVAL_I15M', 900],
  ['INTERVAL_I1H', 3600],
  ['INTERVAL_I6H', 21600],
  ['INTERVAL_I1D', 86400]
])

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid Interval value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid Interval value (' + value + ')')

  // This enum may fully consume the max allowed size
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

module.exports = {
  encode,
  decode,
  encodingLength,
  stringify,
  parse,
  INTERVAL_UNSPECIFIED,
  INTERVAL_BLOCK,
  INTERVAL_I1M,
  INTERVAL_I5M,
  INTERVAL_I15M,
  INTERVAL_I1H,
  INTERVAL_I6H,
  INTERVAL_I1D
}
