/// autogenerated by protoc-plugin-js
const assert = require('nanoassert')
const { enumerable } = require('protobuf-codec/encode/types')
const { enumerable: decodeEnumerable } = require('protobuf-codec/decode/types')

const DISTRIBUTION_STRATEGY_UNSPECIFIED = 0
const DISTRIBUTION_STRATEGY_PRO_RATA = 1
const DISTRIBUTION_STRATEGY_RANK = 2
const DISTRIBUTION_STRATEGY_RANK_LOTTERY = 3

const enumValues = new Map([
  [0, 'DISTRIBUTION_STRATEGY_UNSPECIFIED'],
  [1, 'DISTRIBUTION_STRATEGY_PRO_RATA'],
  [2, 'DISTRIBUTION_STRATEGY_RANK'],
  [3, 'DISTRIBUTION_STRATEGY_RANK_LOTTERY']
])
const enumNames = new Map([
  ['DISTRIBUTION_STRATEGY_UNSPECIFIED', 0],
  ['DISTRIBUTION_STRATEGY_PRO_RATA', 1],
  ['DISTRIBUTION_STRATEGY_RANK', 2],
  ['DISTRIBUTION_STRATEGY_RANK_LOTTERY', 3]
])

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid DistributionStrategy value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid DistributionStrategy value (' + value + ')')

  if (0 <= value && value <= 3) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

module.exports = {
  encode,
  decode,
  encodingLength,
  stringify,
  parse,
  DISTRIBUTION_STRATEGY_UNSPECIFIED,
  DISTRIBUTION_STRATEGY_PRO_RATA,
  DISTRIBUTION_STRATEGY_RANK,
  DISTRIBUTION_STRATEGY_RANK_LOTTERY
}
