/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')

const _vega_Proposal = require('./../Proposal/decode.js')
const _vega_Vote = require('./../Vote/decode.js')
const _vega_GovernanceData_YesPartyEntry = require('./YesPartyEntry/decode.js')
const _vega_GovernanceData_NoPartyEntry = require('./NoPartyEntry/decode.js')
const _vega_GovernanceData_Type = require('./Type.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$proposal = {}
  const field$yes = []
  const field$no = []
  const field$yesParty = []
  const field$noParty = []
  let field$proposalType = _vega_GovernanceData_Type.decode(0)
  const field$proposals = []
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$proposal = _vega_Proposal.decode(data)
        break

      case 2:
        field$yes.push(_vega_Vote.decode(data))
        break

      case 3:
        field$no.push(_vega_Vote.decode(data))
        break

      case 4:
        field$yesParty.push(_vega_GovernanceData_YesPartyEntry.decode(data))
        break

      case 5:
        field$noParty.push(_vega_GovernanceData_NoPartyEntry.decode(data))
        break

      case 6:
        field$proposalType = _vega_GovernanceData_Type.decode(data)
        break

      case 7:
        field$proposals.push(_vega_Proposal.decode(data))
        break
    }
  }
  return {
    proposal: field$proposal,
    yes: field$yes,
    no: field$no,
    yesParty: field$yesParty,
    noParty: field$noParty,
    proposalType: field$proposalType,
    proposals: field$proposals
  }
}
