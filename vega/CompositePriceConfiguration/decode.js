/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint64 } = require('protobuf-codec/decode/types')
const _vega_CompositePriceType = require('./../CompositePriceType.js')
const _vega_DataSourceDefinition = require('./../DataSourceDefinition/decode.js')
const _vega_SpecBindingForCompositePrice = require('./../SpecBindingForCompositePrice/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$decayWeight = ''
  let field$decayPower = 0n
  let field$cashAmount = ''
  const field$sourceWeights = []
  const field$sourceStalenessTolerance = []
  let field$compositePriceType = _vega_CompositePriceType.decode(0)
  const field$dataSourcesSpec = []
  const field$dataSourcesSpecBinding = []
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$decayWeight = string(data)
        break

      case 2:
        field$decayPower = uint64(data)
        break

      case 3:
        field$cashAmount = string(data)
        break

      case 4:
        field$sourceWeights.push(string(data))
        break

      case 5:
        field$sourceStalenessTolerance.push(string(data))
        break

      case 6:
        field$compositePriceType = _vega_CompositePriceType.decode(data)
        break

      case 7:
        field$dataSourcesSpec.push(_vega_DataSourceDefinition.decode(data))
        break

      case 8:
        field$dataSourcesSpecBinding.push(
          _vega_SpecBindingForCompositePrice.decode(data)
        )
        break
    }
  }
  return {
    decayWeight: field$decayWeight,
    decayPower: field$decayPower,
    cashAmount: field$cashAmount,
    sourceWeights: field$sourceWeights,
    sourceStalenessTolerance: field$sourceStalenessTolerance,
    compositePriceType: field$compositePriceType,
    dataSourcesSpec: field$dataSourcesSpec,
    dataSourcesSpecBinding: field$dataSourcesSpecBinding
  }
}
