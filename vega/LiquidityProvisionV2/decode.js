/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, int64, uint64 } = require('protobuf-codec/decode/types')
const _vega_LiquidityOrderReference = require('./../LiquidityOrderReference/decode.js')
const _vega_LiquidityProvisionV2_Status = require('./Status.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$id = ''
  let field$partyId = ''
  let field$createdAt = 0n
  let field$updatedAt = 0n
  let field$marketId = ''
  let field$commitmentAmount = ''
  let field$fee = ''
  const field$sells = []
  const field$buys = []
  let field$version = 0n
  let field$status = _vega_LiquidityProvisionV2_Status.decode(0)
  let field$reference = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = string(data)
        break

      case 2:
        field$partyId = string(data)
        break

      case 3:
        field$createdAt = int64(data)
        break

      case 4:
        field$updatedAt = int64(data)
        break

      case 5:
        field$marketId = string(data)
        break

      case 6:
        field$commitmentAmount = string(data)
        break

      case 7:
        field$fee = string(data)
        break

      case 8:
        field$sells.push(_vega_LiquidityOrderReference.decode(data))
        break

      case 9:
        field$buys.push(_vega_LiquidityOrderReference.decode(data))
        break

      case 10:
        field$version = uint64(data)
        break

      case 11:
        field$status = _vega_LiquidityProvisionV2_Status.decode(data)
        break

      case 12:
        field$reference = string(data)
        break
    }
  }
  return {
    id: field$id,
    partyId: field$partyId,
    createdAt: field$createdAt,
    updatedAt: field$updatedAt,
    marketId: field$marketId,
    commitmentAmount: field$commitmentAmount,
    fee: field$fee,
    sells: field$sells,
    buys: field$buys,
    version: field$version,
    status: field$status,
    reference: field$reference
  }
}
