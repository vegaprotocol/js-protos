/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint32, uint64 } = require('protobuf-codec/decode/types')
const _vega_commands_v1_Signature = require('./../Signature/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$vegaPubKey = ''
  let field$ethereumAddress = ''
  let field$chainPubKey = ''
  let field$infoUrl = ''
  let field$country = ''
  let field$id = ''
  let field$name = ''
  let field$avatarUrl = ''
  let field$vegaPubKeyIndex = 0
  let field$fromEpoch = 0n
  let field$ethereumSignature = {}
  let field$vegaSignature = {}
  let field$submitterAddress = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$vegaPubKey = string(data)
        break

      case 2:
        field$ethereumAddress = string(data)
        break

      case 3:
        field$chainPubKey = string(data)
        break

      case 4:
        field$infoUrl = string(data)
        break

      case 5:
        field$country = string(data)
        break

      case 6:
        field$id = string(data)
        break

      case 7:
        field$name = string(data)
        break

      case 8:
        field$avatarUrl = string(data)
        break

      case 9:
        field$vegaPubKeyIndex = uint32(data)
        break

      case 10:
        field$fromEpoch = uint64(data)
        break

      case 11:
        field$ethereumSignature = _vega_commands_v1_Signature.decode(data)
        break

      case 12:
        field$vegaSignature = _vega_commands_v1_Signature.decode(data)
        break

      case 13:
        field$submitterAddress = string(data)
        break
    }
  }
  return {
    vegaPubKey: field$vegaPubKey,
    ethereumAddress: field$ethereumAddress,
    chainPubKey: field$chainPubKey,
    infoUrl: field$infoUrl,
    country: field$country,
    id: field$id,
    name: field$name,
    avatarUrl: field$avatarUrl,
    vegaPubKeyIndex: field$vegaPubKeyIndex,
    fromEpoch: field$fromEpoch,
    ethereumSignature: field$ethereumSignature,
    vegaSignature: field$vegaSignature,
    submitterAddress: field$submitterAddress
  }
}
