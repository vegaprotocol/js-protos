/// autogenerated by protoc-plugin-js
const Writer = require('protobuf-codec/encode/writer')
const { bytes, string } = require('protobuf-codec/encode/types')
const _vega_commands_v1_Signature = require('./../Signature/encode.js')
const _vega_commands_v1_TxVersion = require('./../TxVersion.js')
const _vega_commands_v1_ProofOfWork = require('./../ProofOfWork/encode.js')

exports.encode = function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer()

  if (obj.inputData) writer.bytes(1, obj.inputData, bytes)
  if (obj.signature)
    writer.bytes(2, _vega_commands_v1_Signature.encode(obj.signature))
  if (obj.version) writer.varint(2000, obj.version, _vega_commands_v1_TxVersion)
  if (obj.pow) writer.bytes(3000, _vega_commands_v1_ProofOfWork.encode(obj.pow))

  if (obj.from?.address ?? obj.address)
    writer.bytes(1001, obj.from?.address ?? obj.address, string)
  if (obj.from?.pubKey ?? obj.pubKey)
    writer.bytes(1002, obj.from?.pubKey ?? obj.pubKey, string)

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }
