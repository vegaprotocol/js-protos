/// autogenerated by protoc-plugin-js
const Writer = require('protobuf-codec/encode/writer')
const { uint64, bool } = require('protobuf-codec/encode/types')
const _vega_ERC20AssetList = require('./../ERC20AssetList/encode.js')
const _vega_ERC20AssetDelist = require('./../ERC20AssetDelist/encode.js')
const _vega_ERC20Deposit = require('./../ERC20Deposit/encode.js')
const _vega_ERC20Withdrawal = require('./../ERC20Withdrawal/encode.js')
const _vega_ERC20AssetLimitsUpdated = require('./../ERC20AssetLimitsUpdated/encode.js')

exports.encode = function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer()

  if (obj.index) writer.varint(1, obj.index, uint64)
  if (obj.block) writer.varint(2, obj.block, uint64)

  if (obj.action?.assetList ?? obj.assetList)
    writer.bytes(
      1001,
      _vega_ERC20AssetList.encode(obj.action?.assetList ?? obj.assetList)
    )
  if (obj.action?.assetDelist ?? obj.assetDelist)
    writer.bytes(
      1002,
      _vega_ERC20AssetDelist.encode(obj.action?.assetDelist ?? obj.assetDelist)
    )
  if (obj.action?.deposit ?? obj.deposit)
    writer.bytes(
      1003,
      _vega_ERC20Deposit.encode(obj.action?.deposit ?? obj.deposit)
    )
  if (obj.action?.withdrawal ?? obj.withdrawal)
    writer.bytes(
      1004,
      _vega_ERC20Withdrawal.encode(obj.action?.withdrawal ?? obj.withdrawal)
    )
  if (obj.action?.assetLimitsUpdated ?? obj.assetLimitsUpdated)
    writer.bytes(
      1005,
      _vega_ERC20AssetLimitsUpdated.encode(
        obj.action?.assetLimitsUpdated ?? obj.assetLimitsUpdated
      )
    )
  if (obj.action?.bridgeStopped ?? obj.bridgeStopped)
    writer.varint(1006, obj.action?.bridgeStopped ?? obj.bridgeStopped, bool)
  if (obj.action?.bridgeResumed ?? obj.bridgeResumed)
    writer.varint(1007, obj.action?.bridgeResumed ?? obj.bridgeResumed, bool)

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }
