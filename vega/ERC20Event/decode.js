/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { uint64, string, bool } = require('protobuf-codec/decode/types')
const _vega_ERC20AssetList = require('./../ERC20AssetList/decode.js')
const _vega_ERC20AssetDelist = require('./../ERC20AssetDelist/decode.js')
const _vega_ERC20Deposit = require('./../ERC20Deposit/decode.js')
const _vega_ERC20Withdrawal = require('./../ERC20Withdrawal/decode.js')
const _vega_ERC20AssetLimitsUpdated = require('./../ERC20AssetLimitsUpdated/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$index = 0n
  let field$block = 0n
  let field$chainId = ''
  let field$action = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$index = uint64(data)
        break

      case 2:
        field$block = uint64(data)
        break

      case 3:
        field$chainId = string(data)
        break

      case 1001:
        field$action = { assetList: _vega_ERC20AssetList.decode(data) }
        break

      case 1002:
        field$action = { assetDelist: _vega_ERC20AssetDelist.decode(data) }
        break

      case 1003:
        field$action = { deposit: _vega_ERC20Deposit.decode(data) }
        break

      case 1004:
        field$action = { withdrawal: _vega_ERC20Withdrawal.decode(data) }
        break

      case 1005:
        field$action = {
          assetLimitsUpdated: _vega_ERC20AssetLimitsUpdated.decode(data)
        }
        break

      case 1006:
        field$action = { bridgeStopped: bool(data) }
        break

      case 1007:
        field$action = { bridgeResumed: bool(data) }
        break
    }
  }
  return {
    index: field$index,
    block: field$block,
    chainId: field$chainId,
    action: field$action
  }
}
