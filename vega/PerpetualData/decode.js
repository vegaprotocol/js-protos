/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint64, int64 } = require('protobuf-codec/decode/types')
const _vega_CompositePriceType = require('./../CompositePriceType.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$fundingPayment = ''
  let field$fundingRate = ''
  let field$internalTwap = ''
  let field$externalTwap = ''
  let field$seqNum = 0n
  let field$startTime = 0n
  let field$internalCompositePrice = ''
  let field$nextInternalCompositePriceCalc = 0n
  let field$internalCompositePriceType = _vega_CompositePriceType.decode(0)
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$fundingPayment = string(data)
        break

      case 2:
        field$fundingRate = string(data)
        break

      case 3:
        field$internalTwap = string(data)
        break

      case 4:
        field$externalTwap = string(data)
        break

      case 5:
        field$seqNum = uint64(data)
        break

      case 6:
        field$startTime = int64(data)
        break

      case 7:
        field$internalCompositePrice = string(data)
        break

      case 8:
        field$nextInternalCompositePriceCalc = int64(data)
        break

      case 9:
        field$internalCompositePriceType = _vega_CompositePriceType.decode(data)
        break
    }
  }
  return {
    fundingPayment: field$fundingPayment,
    fundingRate: field$fundingRate,
    internalTwap: field$internalTwap,
    externalTwap: field$externalTwap,
    seqNum: field$seqNum,
    startTime: field$startTime,
    internalCompositePrice: field$internalCompositePrice,
    nextInternalCompositePriceCalc: field$nextInternalCompositePriceCalc,
    internalCompositePriceType: field$internalCompositePriceType
  }
}
