/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, int64 } = require('protobuf-codec/decode/types')
const _vega_PositionStatus = require('./../PositionStatus.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$marketId = ''
  let field$partyId = ''
  let field$openVolume = 0n
  let field$realisedPnl = ''
  let field$unrealisedPnl = ''
  let field$averageEntryPrice = ''
  let field$updatedAt = 0n
  let field$lossSocialisationAmount = ''
  let field$positionStatus = _vega_PositionStatus.decode(0)
  let field$takerFeesPaid = ''
  let field$makerFeesReceived = ''
  let field$feesPaid = ''
  let field$takerFeesPaidSince = ''
  let field$makerFeesReceivedSince = ''
  let field$feesPaidSince = ''
  let field$fundingPaymentAmount = ''
  let field$fundingPaymentAmountSince = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$marketId = string(data)
        break

      case 2:
        field$partyId = string(data)
        break

      case 3:
        field$openVolume = int64(data)
        break

      case 4:
        field$realisedPnl = string(data)
        break

      case 5:
        field$unrealisedPnl = string(data)
        break

      case 6:
        field$averageEntryPrice = string(data)
        break

      case 7:
        field$updatedAt = int64(data)
        break

      case 8:
        field$lossSocialisationAmount = string(data)
        break

      case 9:
        field$positionStatus = _vega_PositionStatus.decode(data)
        break

      case 10:
        field$takerFeesPaid = string(data)
        break

      case 11:
        field$makerFeesReceived = string(data)
        break

      case 12:
        field$feesPaid = string(data)
        break

      case 13:
        field$takerFeesPaidSince = string(data)
        break

      case 14:
        field$makerFeesReceivedSince = string(data)
        break

      case 15:
        field$feesPaidSince = string(data)
        break

      case 16:
        field$fundingPaymentAmount = string(data)
        break

      case 17:
        field$fundingPaymentAmountSince = string(data)
        break
    }
  }
  return {
    marketId: field$marketId,
    partyId: field$partyId,
    openVolume: field$openVolume,
    realisedPnl: field$realisedPnl,
    unrealisedPnl: field$unrealisedPnl,
    averageEntryPrice: field$averageEntryPrice,
    updatedAt: field$updatedAt,
    lossSocialisationAmount: field$lossSocialisationAmount,
    positionStatus: field$positionStatus,
    takerFeesPaid: field$takerFeesPaid,
    makerFeesReceived: field$makerFeesReceived,
    feesPaid: field$feesPaid,
    takerFeesPaidSince: field$takerFeesPaidSince,
    makerFeesReceivedSince: field$makerFeesReceivedSince,
    feesPaidSince: field$feesPaidSince,
    fundingPaymentAmount: field$fundingPaymentAmount,
    fundingPaymentAmountSince: field$fundingPaymentAmountSince
  }
}
