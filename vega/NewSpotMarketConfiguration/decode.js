/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { uint64, string, int64 } = require('protobuf-codec/decode/types')
const _vega_InstrumentConfiguration = require('./../InstrumentConfiguration/decode.js')
const _vega_PriceMonitoringParameters = require('./../PriceMonitoringParameters/decode.js')
const _vega_TargetStakeParameters = require('./../TargetStakeParameters/decode.js')
const _vega_SimpleModelParams = require('./../SimpleModelParams/decode.js')
const _vega_LogNormalRiskModel = require('./../LogNormalRiskModel/decode.js')
const _vega_LiquiditySLAParameters = require('./../LiquiditySLAParameters/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$instrument = {}
  let field$decimalPlaces = 0n
  const field$metadata = []
  let field$priceMonitoringParameters = {}
  let field$targetStakeParameters = {}
  let field$positionDecimalPlaces = 0n
  let field$slaParams = {}
  let field$risk_parameters = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$instrument = _vega_InstrumentConfiguration.decode(data)
        break

      case 2:
        field$decimalPlaces = uint64(data)
        break

      case 3:
        field$metadata.push(string(data))
        break

      case 4:
        field$priceMonitoringParameters =
          _vega_PriceMonitoringParameters.decode(data)
        break

      case 5:
        field$targetStakeParameters = _vega_TargetStakeParameters.decode(data)
        break

      case 100:
        field$risk_parameters = { simple: _vega_SimpleModelParams.decode(data) }
        break

      case 101:
        field$risk_parameters = {
          logNormal: _vega_LogNormalRiskModel.decode(data)
        }
        break

      case 6:
        field$positionDecimalPlaces = int64(data)
        break

      case 7:
        field$slaParams = _vega_LiquiditySLAParameters.decode(data)
        break
    }
  }
  return {
    instrument: field$instrument,
    decimalPlaces: field$decimalPlaces,
    metadata: field$metadata,
    priceMonitoringParameters: field$priceMonitoringParameters,
    targetStakeParameters: field$targetStakeParameters,
    positionDecimalPlaces: field$positionDecimalPlaces,
    slaParams: field$slaParams,
    risk_parameters: field$risk_parameters
  }
}
