/// autogenerated by protoc-plugin-js
const Writer = require('protobuf-codec/encode/writer')
const { string, int64 } = require('protobuf-codec/encode/types')
const _vega_AccountType = require('./../AccountType.js')
const _vega_DataSourceDefinition = require('./../DataSourceDefinition/encode.js')
const _vega_SpecBindingForCompositePrice = require('./../SpecBindingForCompositePrice/encode.js')
const _vega_DataSourceSpecToAutomatedPurchaseBinding = require('./../DataSourceSpecToAutomatedPurchaseBinding/encode.js')

exports.encode = function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer()

  if (obj.from) writer.bytes(1, obj.from, string)
  if (obj.fromAccountType)
    writer.varint(2, obj.fromAccountType, _vega_AccountType)
  if (obj.toAccountType) writer.varint(3, obj.toAccountType, _vega_AccountType)
  if (obj.marketId) writer.bytes(4, obj.marketId, string)
  if (obj.priceOracle)
    writer.bytes(5, _vega_DataSourceDefinition.encode(obj.priceOracle))
  if (obj.priceOracleSpecBinding)
    writer.bytes(
      6,
      _vega_SpecBindingForCompositePrice.encode(obj.priceOracleSpecBinding)
    )
  if (obj.oracleOffsetFactor) writer.bytes(7, obj.oracleOffsetFactor, string)
  if (obj.auctionSchedule)
    writer.bytes(8, _vega_DataSourceDefinition.encode(obj.auctionSchedule))
  if (obj.auctionVolumeSnapshotSchedule)
    writer.bytes(
      9,
      _vega_DataSourceDefinition.encode(obj.auctionVolumeSnapshotSchedule)
    )
  if (obj.automatedPurchaseSpecBinding)
    writer.bytes(
      10,
      _vega_DataSourceSpecToAutomatedPurchaseBinding.encode(
        obj.automatedPurchaseSpecBinding
      )
    )
  if (obj.auctionDuration) writer.bytes(11, obj.auctionDuration, string)
  if (obj.minimumAuctionSize) writer.bytes(12, obj.minimumAuctionSize, string)
  if (obj.maximumAuctionSize) writer.bytes(13, obj.maximumAuctionSize, string)
  if (obj.expiryTimestamp) writer.varint(14, obj.expiryTimestamp, int64)
  if (obj.oraclePriceStalenessTolerance)
    writer.bytes(15, obj.oraclePriceStalenessTolerance, string)

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }
