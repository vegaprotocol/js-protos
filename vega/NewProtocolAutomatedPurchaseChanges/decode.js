/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, int64 } = require('protobuf-codec/decode/types')
const _vega_AccountType = require('./../AccountType.js')
const _vega_DataSourceDefinition = require('./../DataSourceDefinition/decode.js')
const _vega_SpecBindingForCompositePrice = require('./../SpecBindingForCompositePrice/decode.js')
const _vega_DataSourceSpecToAutomatedPurchaseBinding = require('./../DataSourceSpecToAutomatedPurchaseBinding/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$from = ''
  let field$fromAccountType = _vega_AccountType.decode(0)
  let field$toAccountType = _vega_AccountType.decode(0)
  let field$marketId = ''
  let field$priceOracle = {}
  let field$priceOracleSpecBinding = {}
  let field$oracleOffsetFactor = ''
  let field$auctionSchedule = {}
  let field$auctionVolumeSnapshotSchedule = {}
  let field$automatedPurchaseSpecBinding = {}
  let field$auctionDuration = ''
  let field$minimumAuctionSize = ''
  let field$maximumAuctionSize = ''
  let field$expiryTimestamp = 0n
  let field$oraclePriceStalenessTolerance = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$from = string(data)
        break

      case 2:
        field$fromAccountType = _vega_AccountType.decode(data)
        break

      case 3:
        field$toAccountType = _vega_AccountType.decode(data)
        break

      case 4:
        field$marketId = string(data)
        break

      case 5:
        field$priceOracle = _vega_DataSourceDefinition.decode(data)
        break

      case 6:
        field$priceOracleSpecBinding =
          _vega_SpecBindingForCompositePrice.decode(data)
        break

      case 7:
        field$oracleOffsetFactor = string(data)
        break

      case 8:
        field$auctionSchedule = _vega_DataSourceDefinition.decode(data)
        break

      case 9:
        field$auctionVolumeSnapshotSchedule =
          _vega_DataSourceDefinition.decode(data)
        break

      case 10:
        field$automatedPurchaseSpecBinding =
          _vega_DataSourceSpecToAutomatedPurchaseBinding.decode(data)
        break

      case 11:
        field$auctionDuration = string(data)
        break

      case 12:
        field$minimumAuctionSize = string(data)
        break

      case 13:
        field$maximumAuctionSize = string(data)
        break

      case 14:
        field$expiryTimestamp = int64(data)
        break

      case 15:
        field$oraclePriceStalenessTolerance = string(data)
        break
    }
  }
  return {
    from: field$from,
    fromAccountType: field$fromAccountType,
    toAccountType: field$toAccountType,
    marketId: field$marketId,
    priceOracle: field$priceOracle,
    priceOracleSpecBinding: field$priceOracleSpecBinding,
    oracleOffsetFactor: field$oracleOffsetFactor,
    auctionSchedule: field$auctionSchedule,
    auctionVolumeSnapshotSchedule: field$auctionVolumeSnapshotSchedule,
    automatedPurchaseSpecBinding: field$automatedPurchaseSpecBinding,
    auctionDuration: field$auctionDuration,
    minimumAuctionSize: field$minimumAuctionSize,
    maximumAuctionSize: field$maximumAuctionSize,
    expiryTimestamp: field$expiryTimestamp,
    oraclePriceStalenessTolerance: field$oraclePriceStalenessTolerance
  }
}
