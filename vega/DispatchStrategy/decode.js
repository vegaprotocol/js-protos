/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, uint64 } = require('protobuf-codec/decode/types')
const _vega_DispatchMetric = require('./../DispatchMetric.js')
const _vega_EntityScope = require('./../EntityScope.js')
const _vega_IndividualScope = require('./../IndividualScope.js')
const _vega_DistributionStrategy = require('./../DistributionStrategy.js')
const _vega_Rank = require('./../Rank/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$assetForMetric = ''
  let field$metric = _vega_DispatchMetric.decode(0)
  const field$markets = []
  let field$entityScope = _vega_EntityScope.decode(0)
  let field$individualScope = _vega_IndividualScope.decode(0)
  const field$teamScope = []
  let field$nTopPerformers = ''
  let field$stakingRequirement = ''
  let field$notionalTimeWeightedAveragePositionRequirement = ''
  let field$windowLength = 0n
  let field$lockPeriod = 0n
  let field$distributionStrategy = _vega_DistributionStrategy.decode(0)
  const field$rankTable = []
  let field$capRewardFeeMultiple = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$assetForMetric = string(data)
        break

      case 2:
        field$metric = _vega_DispatchMetric.decode(data)
        break

      case 3:
        field$markets.push(string(data))
        break

      case 4:
        field$entityScope = _vega_EntityScope.decode(data)
        break

      case 5:
        field$individualScope = _vega_IndividualScope.decode(data)
        break

      case 6:
        field$teamScope.push(string(data))
        break

      case 7:
        field$nTopPerformers = string(data)
        break

      case 8:
        field$stakingRequirement = string(data)
        break

      case 9:
        field$notionalTimeWeightedAveragePositionRequirement = string(data)
        break

      case 10:
        field$windowLength = uint64(data)
        break

      case 11:
        field$lockPeriod = uint64(data)
        break

      case 12:
        field$distributionStrategy = _vega_DistributionStrategy.decode(data)
        break

      case 13:
        field$rankTable.push(_vega_Rank.decode(data))
        break

      case 14:
        field$capRewardFeeMultiple = string(data)
        break
    }
  }
  return {
    assetForMetric: field$assetForMetric,
    metric: field$metric,
    markets: field$markets,
    entityScope: field$entityScope,
    individualScope: field$individualScope,
    teamScope: field$teamScope,
    nTopPerformers: field$nTopPerformers,
    stakingRequirement: field$stakingRequirement,
    notionalTimeWeightedAveragePositionRequirement:
      field$notionalTimeWeightedAveragePositionRequirement,
    windowLength: field$windowLength,
    lockPeriod: field$lockPeriod,
    distributionStrategy: field$distributionStrategy,
    rankTable: field$rankTable,
    capRewardFeeMultiple: field$capRewardFeeMultiple
  }
}
