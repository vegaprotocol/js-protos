/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { uint64, string } = require('protobuf-codec/decode/types')
const _vega_ERC20SignerAdded = require('./../ERC20SignerAdded/decode.js')
const _vega_ERC20SignerRemoved = require('./../ERC20SignerRemoved/decode.js')
const _vega_ERC20ThresholdSet = require('./../ERC20ThresholdSet/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$index = 0n
  let field$block = 0n
  let field$chainId = ''
  let field$action = null
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$index = uint64(data)
        break

      case 2:
        field$block = uint64(data)
        break

      case 3:
        field$chainId = string(data)
        break

      case 1001:
        field$action = { signerAdded: _vega_ERC20SignerAdded.decode(data) }
        break

      case 1002:
        field$action = { signerRemoved: _vega_ERC20SignerRemoved.decode(data) }
        break

      case 1003:
        field$action = { thresholdSet: _vega_ERC20ThresholdSet.decode(data) }
        break
    }
  }
  return {
    index: field$index,
    block: field$block,
    chainId: field$chainId,
    action: field$action
  }
}
