/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { string, int64 } = require('protobuf-codec/decode/types')
const _vega_Vote_Value = require('./Value.js')
const _vega_Vote_PerMarketEquityLikeShareWeightEntry = require('./PerMarketEquityLikeShareWeightEntry/decode.js')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$partyId = ''
  let field$value = _vega_Vote_Value.decode(0)
  let field$proposalId = ''
  let field$timestamp = 0n
  let field$totalGovernanceTokenBalance = ''
  let field$totalGovernanceTokenWeight = ''
  let field$totalEquityLikeShareWeight = ''
  const field$perMarketEquityLikeShareWeight = []
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$partyId = string(data)
        break

      case 2:
        field$value = _vega_Vote_Value.decode(data)
        break

      case 3:
        field$proposalId = string(data)
        break

      case 4:
        field$timestamp = int64(data)
        break

      case 5:
        field$totalGovernanceTokenBalance = string(data)
        break

      case 6:
        field$totalGovernanceTokenWeight = string(data)
        break

      case 7:
        field$totalEquityLikeShareWeight = string(data)
        break

      case 8:
        field$perMarketEquityLikeShareWeight.push(
          _vega_Vote_PerMarketEquityLikeShareWeightEntry.decode(data)
        )
        break
    }
  }
  return {
    partyId: field$partyId,
    value: field$value,
    proposalId: field$proposalId,
    timestamp: field$timestamp,
    totalGovernanceTokenBalance: field$totalGovernanceTokenBalance,
    totalGovernanceTokenWeight: field$totalGovernanceTokenWeight,
    totalEquityLikeShareWeight: field$totalEquityLikeShareWeight,
    perMarketEquityLikeShareWeight: field$perMarketEquityLikeShareWeight
  }
}
