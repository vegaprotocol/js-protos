/// autogenerated by protoc-plugin-js
const reader = require('protobuf-codec/decode/reader')
const { int64, string } = require('protobuf-codec/decode/types')

exports.decode = function decode(
  buf,
  byteOffset = 0,
  byteLength = buf.byteLength
) {
  let field$minClose = 0n
  let field$maxClose = 0n
  let field$minEnact = 0n
  let field$maxEnact = 0n
  let field$requiredParticipation = ''
  let field$requiredMajority = ''
  let field$minProposerBalance = ''
  let field$minVoterBalance = ''
  let field$requiredParticipationLp = ''
  let field$requiredMajorityLp = ''
  let field$minEquityLikeShare = ''
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$minClose = int64(data)
        break

      case 2:
        field$maxClose = int64(data)
        break

      case 3:
        field$minEnact = int64(data)
        break

      case 4:
        field$maxEnact = int64(data)
        break

      case 5:
        field$requiredParticipation = string(data)
        break

      case 6:
        field$requiredMajority = string(data)
        break

      case 7:
        field$minProposerBalance = string(data)
        break

      case 8:
        field$minVoterBalance = string(data)
        break

      case 9:
        field$requiredParticipationLp = string(data)
        break

      case 10:
        field$requiredMajorityLp = string(data)
        break

      case 11:
        field$minEquityLikeShare = string(data)
        break
    }
  }
  return {
    minClose: field$minClose,
    maxClose: field$maxClose,
    minEnact: field$minEnact,
    maxEnact: field$maxEnact,
    requiredParticipation: field$requiredParticipation,
    requiredMajority: field$requiredMajority,
    minProposerBalance: field$minProposerBalance,
    minVoterBalance: field$minVoterBalance,
    requiredParticipationLp: field$requiredParticipationLp,
    requiredMajorityLp: field$requiredMajorityLp,
    minEquityLikeShare: field$minEquityLikeShare
  }
}
