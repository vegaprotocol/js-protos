/// autogenerated by protoc-plugin-js
const assert = require('nanoassert')
const { enumerable } = require('protobuf-codec/encode/types')
const { enumerable: decodeEnumerable } = require('protobuf-codec/decode/types')

const DISPATCH_METRIC_UNSPECIFIED = 0
const DISPATCH_METRIC_MAKER_FEES_PAID = 1
const DISPATCH_METRIC_MAKER_FEES_RECEIVED = 2
const DISPATCH_METRIC_LP_FEES_RECEIVED = 3
const DISPATCH_METRIC_MARKET_VALUE = 4
const DISPATCH_METRIC_AVERAGE_POSITION = 5
const DISPATCH_METRIC_RELATIVE_RETURN = 6
const DISPATCH_METRIC_RETURN_VOLATILITY = 7
const DISPATCH_METRIC_VALIDATOR_RANKING = 8
const DISPATCH_METRIC_REALISED_RETURN = 9

const enumValues = new Map([
  [0, 'DISPATCH_METRIC_UNSPECIFIED'],
  [1, 'DISPATCH_METRIC_MAKER_FEES_PAID'],
  [2, 'DISPATCH_METRIC_MAKER_FEES_RECEIVED'],
  [3, 'DISPATCH_METRIC_LP_FEES_RECEIVED'],
  [4, 'DISPATCH_METRIC_MARKET_VALUE'],
  [5, 'DISPATCH_METRIC_AVERAGE_POSITION'],
  [6, 'DISPATCH_METRIC_RELATIVE_RETURN'],
  [7, 'DISPATCH_METRIC_RETURN_VOLATILITY'],
  [8, 'DISPATCH_METRIC_VALIDATOR_RANKING'],
  [9, 'DISPATCH_METRIC_REALISED_RETURN']
])
const enumNames = new Map([
  ['DISPATCH_METRIC_UNSPECIFIED', 0],
  ['DISPATCH_METRIC_MAKER_FEES_PAID', 1],
  ['DISPATCH_METRIC_MAKER_FEES_RECEIVED', 2],
  ['DISPATCH_METRIC_LP_FEES_RECEIVED', 3],
  ['DISPATCH_METRIC_MARKET_VALUE', 4],
  ['DISPATCH_METRIC_AVERAGE_POSITION', 5],
  ['DISPATCH_METRIC_RELATIVE_RETURN', 6],
  ['DISPATCH_METRIC_RETURN_VOLATILITY', 7],
  ['DISPATCH_METRIC_VALIDATOR_RANKING', 8],
  ['DISPATCH_METRIC_REALISED_RETURN', 9]
])

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid DispatchMetric value (' + value + ')')

  return enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = decodeEnumerable(varint)

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid DispatchMetric value (' + value + ')')

  if (0 <= value && value <= 9) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

module.exports = {
  encode,
  decode,
  encodingLength,
  stringify,
  parse,
  DISPATCH_METRIC_UNSPECIFIED,
  DISPATCH_METRIC_MAKER_FEES_PAID,
  DISPATCH_METRIC_MAKER_FEES_RECEIVED,
  DISPATCH_METRIC_LP_FEES_RECEIVED,
  DISPATCH_METRIC_MARKET_VALUE,
  DISPATCH_METRIC_AVERAGE_POSITION,
  DISPATCH_METRIC_RELATIVE_RETURN,
  DISPATCH_METRIC_RETURN_VOLATILITY,
  DISPATCH_METRIC_VALIDATOR_RANKING,
  DISPATCH_METRIC_REALISED_RETURN
}
