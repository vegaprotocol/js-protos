'use strict';

var commands = require('./vega/commands.cjs');
var data = require('./vega/data.cjs');
var Side = require('./vega/Side.cjs');
var Interval = require('./vega/Interval.cjs');
var PositionStatus = require('./vega/PositionStatus.cjs');
var AuctionTrigger = require('./vega/AuctionTrigger.cjs');
var PeggedReference = require('./vega/PeggedReference.cjs');
var OrderError = require('./vega/OrderError.cjs');
var ChainStatus = require('./vega/ChainStatus.cjs');
var AccountType = require('./vega/AccountType.cjs');
var TransferType = require('./vega/TransferType.cjs');
var DispatchMetric = require('./vega/DispatchMetric.cjs');
var NodeStatus = require('./vega/NodeStatus.cjs');
var EpochAction = require('./vega/EpochAction.cjs');
var ValidatorNodeStatus = require('./vega/ValidatorNodeStatus.cjs');
var ProposalError = require('./vega/ProposalError.cjs');
var GovernanceTransferType = require('./vega/GovernanceTransferType.cjs');
var EthContractCallEvent = require('./vega/EthContractCallEvent.cjs');
var BuiltinAssetDeposit = require('./vega/BuiltinAssetDeposit.cjs');
var BuiltinAssetWithdrawal = require('./vega/BuiltinAssetWithdrawal.cjs');
var BuiltinAssetEvent = require('./vega/BuiltinAssetEvent.cjs');
var ERC20AssetList = require('./vega/ERC20AssetList.cjs');
var ERC20AssetDelist = require('./vega/ERC20AssetDelist.cjs');
var ERC20AssetLimitsUpdated = require('./vega/ERC20AssetLimitsUpdated.cjs');
var ERC20Deposit = require('./vega/ERC20Deposit.cjs');
var ERC20Withdrawal = require('./vega/ERC20Withdrawal.cjs');
var ERC20Event = require('./vega/ERC20Event.cjs');
var ERC20SignerAdded = require('./vega/ERC20SignerAdded.cjs');
var ERC20SignerRemoved = require('./vega/ERC20SignerRemoved.cjs');
var ERC20ThresholdSet = require('./vega/ERC20ThresholdSet.cjs');
var ERC20MultiSigEvent = require('./vega/ERC20MultiSigEvent.cjs');
var StakingEvent = require('./vega/StakingEvent.cjs');
var StakeDeposited = require('./vega/StakeDeposited.cjs');
var StakeRemoved = require('./vega/StakeRemoved.cjs');
var StakeTotalSupply = require('./vega/StakeTotalSupply.cjs');
var DataSourceDefinition = require('./vega/DataSourceDefinition.cjs');
var DataSourceSpecConfigurationTime = require('./vega/DataSourceSpecConfigurationTime.cjs');
var DataSourceDefinitionInternal = require('./vega/DataSourceDefinitionInternal.cjs');
var DataSourceDefinitionExternal = require('./vega/DataSourceDefinitionExternal.cjs');
var DataSourceSpecConfiguration = require('./vega/DataSourceSpecConfiguration.cjs');
var EthCallSpec = require('./vega/EthCallSpec.cjs');
var EthCallTrigger = require('./vega/EthCallTrigger.cjs');
var EthTimeTrigger = require('./vega/EthTimeTrigger.cjs');
var DataSourceSpec = require('./vega/DataSourceSpec.cjs');
var ExternalDataSourceSpec = require('./vega/ExternalDataSourceSpec.cjs');
var AuctionDuration = require('./vega/AuctionDuration.cjs');
var Spot = require('./vega/Spot.cjs');
var Future = require('./vega/Future.cjs');
var DataSourceSpecToFutureBinding = require('./vega/DataSourceSpecToFutureBinding.cjs');
var InstrumentMetadata = require('./vega/InstrumentMetadata.cjs');
var Instrument = require('./vega/Instrument.cjs');
var LogNormalRiskModel = require('./vega/LogNormalRiskModel.cjs');
var LogNormalModelParams = require('./vega/LogNormalModelParams.cjs');
var SimpleRiskModel = require('./vega/SimpleRiskModel.cjs');
var SimpleModelParams = require('./vega/SimpleModelParams.cjs');
var ScalingFactors = require('./vega/ScalingFactors.cjs');
var MarginCalculator = require('./vega/MarginCalculator.cjs');
var TradableInstrument = require('./vega/TradableInstrument.cjs');
var FeeFactors = require('./vega/FeeFactors.cjs');
var Fees = require('./vega/Fees.cjs');
var PriceMonitoringTrigger = require('./vega/PriceMonitoringTrigger.cjs');
var PriceMonitoringParameters = require('./vega/PriceMonitoringParameters.cjs');
var PriceMonitoringSettings = require('./vega/PriceMonitoringSettings.cjs');
var LiquidityMonitoringParameters = require('./vega/LiquidityMonitoringParameters.cjs');
var TargetStakeParameters = require('./vega/TargetStakeParameters.cjs');
var Market = require('./vega/Market.cjs');
var MarketTimestamps = require('./vega/MarketTimestamps.cjs');
var StopOrder = require('./vega/StopOrder.cjs');
var Party = require('./vega/Party.cjs');
var RiskFactor = require('./vega/RiskFactor.cjs');
var PeggedOrder = require('./vega/PeggedOrder.cjs');
var IcebergOrder = require('./vega/IcebergOrder.cjs');
var Order = require('./vega/Order.cjs');
var OrderCancellationConfirmation = require('./vega/OrderCancellationConfirmation.cjs');
var OrderConfirmation = require('./vega/OrderConfirmation.cjs');
var AuctionIndicativeState = require('./vega/AuctionIndicativeState.cjs');
var Trade = require('./vega/Trade.cjs');
var Fee = require('./vega/Fee.cjs');
var TradeSet = require('./vega/TradeSet.cjs');
var Candle = require('./vega/Candle.cjs');
var PriceLevel = require('./vega/PriceLevel.cjs');
var MarketDepth = require('./vega/MarketDepth.cjs');
var MarketDepthUpdate = require('./vega/MarketDepthUpdate.cjs');
var Position = require('./vega/Position.cjs');
var PositionTrade = require('./vega/PositionTrade.cjs');
var Deposit = require('./vega/Deposit.cjs');
var Withdrawal = require('./vega/Withdrawal.cjs');
var WithdrawExt = require('./vega/WithdrawExt.cjs');
var Erc20WithdrawExt = require('./vega/Erc20WithdrawExt.cjs');
var Account = require('./vega/Account.cjs');
var FinancialAmount = require('./vega/FinancialAmount.cjs');
var Transfer = require('./vega/Transfer.cjs');
var DispatchStrategy = require('./vega/DispatchStrategy.cjs');
var TransferRequest = require('./vega/TransferRequest.cjs');
var AccountDetails = require('./vega/AccountDetails.cjs');
var LedgerEntry = require('./vega/LedgerEntry.cjs');
var PostTransferBalance = require('./vega/PostTransferBalance.cjs');
var LedgerMovement = require('./vega/LedgerMovement.cjs');
var MarginLevels = require('./vega/MarginLevels.cjs');
var MarketData = require('./vega/MarketData.cjs');
var LiquidityProviderFeeShare = require('./vega/LiquidityProviderFeeShare.cjs');
var PriceMonitoringBounds = require('./vega/PriceMonitoringBounds.cjs');
var ErrorDetail = require('./vega/ErrorDetail.cjs');
var NetworkParameter = require('./vega/NetworkParameter.cjs');
var NetworkLimits = require('./vega/NetworkLimits.cjs');
var LiquidityOrder = require('./vega/LiquidityOrder.cjs');
var LiquidityOrderReference = require('./vega/LiquidityOrderReference.cjs');
var LiquidityProvision = require('./vega/LiquidityProvision.cjs');
var EthereumConfig = require('./vega/EthereumConfig.cjs');
var EthereumContractConfig = require('./vega/EthereumContractConfig.cjs');
var EpochTimestamps = require('./vega/EpochTimestamps.cjs');
var Epoch = require('./vega/Epoch.cjs');
var EpochParticipation = require('./vega/EpochParticipation.cjs');
var EpochData = require('./vega/EpochData.cjs');
var RankingScore = require('./vega/RankingScore.cjs');
var RewardScore = require('./vega/RewardScore.cjs');
var Node = require('./vega/Node.cjs');
var NodeSet = require('./vega/NodeSet.cjs');
var NodeData = require('./vega/NodeData.cjs');
var Delegation = require('./vega/Delegation.cjs');
var Reward = require('./vega/Reward.cjs');
var RewardSummary = require('./vega/RewardSummary.cjs');
var EpochRewardSummary = require('./vega/EpochRewardSummary.cjs');
var StateValueProposal = require('./vega/StateValueProposal.cjs');
var KeyValueBundle = require('./vega/KeyValueBundle.cjs');
var StateVarValue = require('./vega/StateVarValue.cjs');
var ScalarValue = require('./vega/ScalarValue.cjs');
var VectorValue = require('./vega/VectorValue.cjs');
var MatrixValue = require('./vega/MatrixValue.cjs');
var Asset = require('./vega/Asset.cjs');
var AssetDetails = require('./vega/AssetDetails.cjs');
var BuiltinAsset = require('./vega/BuiltinAsset.cjs');
var ERC20 = require('./vega/ERC20.cjs');
var AssetDetailsUpdate = require('./vega/AssetDetailsUpdate.cjs');
var ERC20Update = require('./vega/ERC20Update.cjs');
var SpotProduct = require('./vega/SpotProduct.cjs');
var FutureProduct = require('./vega/FutureProduct.cjs');
var InstrumentConfiguration = require('./vega/InstrumentConfiguration.cjs');
var NewSpotMarketConfiguration = require('./vega/NewSpotMarketConfiguration.cjs');
var NewMarketConfiguration = require('./vega/NewMarketConfiguration.cjs');
var NewSpotMarket = require('./vega/NewSpotMarket.cjs');
var SuccessorConfiguration = require('./vega/SuccessorConfiguration.cjs');
var NewMarket = require('./vega/NewMarket.cjs');
var UpdateMarket = require('./vega/UpdateMarket.cjs');
var UpdateSpotMarket = require('./vega/UpdateSpotMarket.cjs');
var UpdateMarketConfiguration = require('./vega/UpdateMarketConfiguration.cjs');
var UpdateSpotMarketConfiguration = require('./vega/UpdateSpotMarketConfiguration.cjs');
var UpdateInstrumentConfiguration = require('./vega/UpdateInstrumentConfiguration.cjs');
var UpdateFutureProduct = require('./vega/UpdateFutureProduct.cjs');
var UpdateNetworkParameter = require('./vega/UpdateNetworkParameter.cjs');
var NewAsset = require('./vega/NewAsset.cjs');
var UpdateAsset = require('./vega/UpdateAsset.cjs');
var NewFreeform = require('./vega/NewFreeform.cjs');
var ProposalTerms = require('./vega/ProposalTerms.cjs');
var ProposalRationale = require('./vega/ProposalRationale.cjs');
var GovernanceData = require('./vega/GovernanceData.cjs');
var Proposal = require('./vega/Proposal.cjs');
var Vote = require('./vega/Vote.cjs');
var CancelTransfer = require('./vega/CancelTransfer.cjs');
var CancelTransferConfiguration = require('./vega/CancelTransferConfiguration.cjs');
var NewTransfer = require('./vega/NewTransfer.cjs');
var NewTransferConfiguration = require('./vega/NewTransferConfiguration.cjs');
var OneOffTransfer = require('./vega/OneOffTransfer.cjs');
var RecurringTransfer = require('./vega/RecurringTransfer.cjs');

/// autogenerated by protoc-plugin-js

exports.commands = commands;
exports.data = data;
exports.Side = Side;
exports.Interval = Interval;
exports.PositionStatus = PositionStatus;
exports.AuctionTrigger = AuctionTrigger;
exports.PeggedReference = PeggedReference;
exports.OrderError = OrderError;
exports.ChainStatus = ChainStatus;
exports.AccountType = AccountType;
exports.TransferType = TransferType;
exports.DispatchMetric = DispatchMetric;
exports.NodeStatus = NodeStatus;
exports.EpochAction = EpochAction;
exports.ValidatorNodeStatus = ValidatorNodeStatus;
exports.ProposalError = ProposalError;
exports.GovernanceTransferType = GovernanceTransferType;
exports.EthContractCallEvent = EthContractCallEvent;
exports.BuiltinAssetDeposit = BuiltinAssetDeposit;
exports.BuiltinAssetWithdrawal = BuiltinAssetWithdrawal;
exports.BuiltinAssetEvent = BuiltinAssetEvent;
exports.ERC20AssetList = ERC20AssetList;
exports.ERC20AssetDelist = ERC20AssetDelist;
exports.ERC20AssetLimitsUpdated = ERC20AssetLimitsUpdated;
exports.ERC20Deposit = ERC20Deposit;
exports.ERC20Withdrawal = ERC20Withdrawal;
exports.ERC20Event = ERC20Event;
exports.ERC20SignerAdded = ERC20SignerAdded;
exports.ERC20SignerRemoved = ERC20SignerRemoved;
exports.ERC20ThresholdSet = ERC20ThresholdSet;
exports.ERC20MultiSigEvent = ERC20MultiSigEvent;
exports.StakingEvent = StakingEvent;
exports.StakeDeposited = StakeDeposited;
exports.StakeRemoved = StakeRemoved;
exports.StakeTotalSupply = StakeTotalSupply;
exports.DataSourceDefinition = DataSourceDefinition;
exports.DataSourceSpecConfigurationTime = DataSourceSpecConfigurationTime;
exports.DataSourceDefinitionInternal = DataSourceDefinitionInternal;
exports.DataSourceDefinitionExternal = DataSourceDefinitionExternal;
exports.DataSourceSpecConfiguration = DataSourceSpecConfiguration;
exports.EthCallSpec = EthCallSpec;
exports.EthCallTrigger = EthCallTrigger;
exports.EthTimeTrigger = EthTimeTrigger;
exports.DataSourceSpec = DataSourceSpec;
exports.ExternalDataSourceSpec = ExternalDataSourceSpec;
exports.AuctionDuration = AuctionDuration;
exports.Spot = Spot;
exports.Future = Future;
exports.DataSourceSpecToFutureBinding = DataSourceSpecToFutureBinding;
exports.InstrumentMetadata = InstrumentMetadata;
exports.Instrument = Instrument;
exports.LogNormalRiskModel = LogNormalRiskModel;
exports.LogNormalModelParams = LogNormalModelParams;
exports.SimpleRiskModel = SimpleRiskModel;
exports.SimpleModelParams = SimpleModelParams;
exports.ScalingFactors = ScalingFactors;
exports.MarginCalculator = MarginCalculator;
exports.TradableInstrument = TradableInstrument;
exports.FeeFactors = FeeFactors;
exports.Fees = Fees;
exports.PriceMonitoringTrigger = PriceMonitoringTrigger;
exports.PriceMonitoringParameters = PriceMonitoringParameters;
exports.PriceMonitoringSettings = PriceMonitoringSettings;
exports.LiquidityMonitoringParameters = LiquidityMonitoringParameters;
exports.TargetStakeParameters = TargetStakeParameters;
exports.Market = Market;
exports.MarketTimestamps = MarketTimestamps;
exports.StopOrder = StopOrder;
exports.Party = Party;
exports.RiskFactor = RiskFactor;
exports.PeggedOrder = PeggedOrder;
exports.IcebergOrder = IcebergOrder;
exports.Order = Order;
exports.OrderCancellationConfirmation = OrderCancellationConfirmation;
exports.OrderConfirmation = OrderConfirmation;
exports.AuctionIndicativeState = AuctionIndicativeState;
exports.Trade = Trade;
exports.Fee = Fee;
exports.TradeSet = TradeSet;
exports.Candle = Candle;
exports.PriceLevel = PriceLevel;
exports.MarketDepth = MarketDepth;
exports.MarketDepthUpdate = MarketDepthUpdate;
exports.Position = Position;
exports.PositionTrade = PositionTrade;
exports.Deposit = Deposit;
exports.Withdrawal = Withdrawal;
exports.WithdrawExt = WithdrawExt;
exports.Erc20WithdrawExt = Erc20WithdrawExt;
exports.Account = Account;
exports.FinancialAmount = FinancialAmount;
exports.Transfer = Transfer;
exports.DispatchStrategy = DispatchStrategy;
exports.TransferRequest = TransferRequest;
exports.AccountDetails = AccountDetails;
exports.LedgerEntry = LedgerEntry;
exports.PostTransferBalance = PostTransferBalance;
exports.LedgerMovement = LedgerMovement;
exports.MarginLevels = MarginLevels;
exports.MarketData = MarketData;
exports.LiquidityProviderFeeShare = LiquidityProviderFeeShare;
exports.PriceMonitoringBounds = PriceMonitoringBounds;
exports.ErrorDetail = ErrorDetail;
exports.NetworkParameter = NetworkParameter;
exports.NetworkLimits = NetworkLimits;
exports.LiquidityOrder = LiquidityOrder;
exports.LiquidityOrderReference = LiquidityOrderReference;
exports.LiquidityProvision = LiquidityProvision;
exports.EthereumConfig = EthereumConfig;
exports.EthereumContractConfig = EthereumContractConfig;
exports.EpochTimestamps = EpochTimestamps;
exports.Epoch = Epoch;
exports.EpochParticipation = EpochParticipation;
exports.EpochData = EpochData;
exports.RankingScore = RankingScore;
exports.RewardScore = RewardScore;
exports.Node = Node;
exports.NodeSet = NodeSet;
exports.NodeData = NodeData;
exports.Delegation = Delegation;
exports.Reward = Reward;
exports.RewardSummary = RewardSummary;
exports.EpochRewardSummary = EpochRewardSummary;
exports.StateValueProposal = StateValueProposal;
exports.KeyValueBundle = KeyValueBundle;
exports.StateVarValue = StateVarValue;
exports.ScalarValue = ScalarValue;
exports.VectorValue = VectorValue;
exports.MatrixValue = MatrixValue;
exports.Asset = Asset;
exports.AssetDetails = AssetDetails;
exports.BuiltinAsset = BuiltinAsset;
exports.ERC20 = ERC20;
exports.AssetDetailsUpdate = AssetDetailsUpdate;
exports.ERC20Update = ERC20Update;
exports.SpotProduct = SpotProduct;
exports.FutureProduct = FutureProduct;
exports.InstrumentConfiguration = InstrumentConfiguration;
exports.NewSpotMarketConfiguration = NewSpotMarketConfiguration;
exports.NewMarketConfiguration = NewMarketConfiguration;
exports.NewSpotMarket = NewSpotMarket;
exports.SuccessorConfiguration = SuccessorConfiguration;
exports.NewMarket = NewMarket;
exports.UpdateMarket = UpdateMarket;
exports.UpdateSpotMarket = UpdateSpotMarket;
exports.UpdateMarketConfiguration = UpdateMarketConfiguration;
exports.UpdateSpotMarketConfiguration = UpdateSpotMarketConfiguration;
exports.UpdateInstrumentConfiguration = UpdateInstrumentConfiguration;
exports.UpdateFutureProduct = UpdateFutureProduct;
exports.UpdateNetworkParameter = UpdateNetworkParameter;
exports.NewAsset = NewAsset;
exports.UpdateAsset = UpdateAsset;
exports.NewFreeform = NewFreeform;
exports.ProposalTerms = ProposalTerms;
exports.ProposalRationale = ProposalRationale;
exports.GovernanceData = GovernanceData;
exports.Proposal = Proposal;
exports.Vote = Vote;
exports.CancelTransfer = CancelTransfer;
exports.CancelTransferConfiguration = CancelTransferConfiguration;
exports.NewTransfer = NewTransfer;
exports.NewTransferConfiguration = NewTransferConfiguration;
exports.OneOffTransfer = OneOffTransfer;
exports.RecurringTransfer = RecurringTransfer;
