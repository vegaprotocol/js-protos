'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var Side = require('../Side.cjs');
var Type = require('./Type.cjs');
var decode$1 = require('../Fee/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = '';
  let field$marketId = '';
  let field$price = '';
  let field$size = 0n;
  let field$buyer = '';
  let field$seller = '';
  let field$aggressor = 0;
  let field$buyOrder = '';
  let field$sellOrder = '';
  let field$timestamp = 0n;
  let field$type = 0;
  let field$buyerFee = {};
  let field$sellerFee = {};
  let field$buyerAuctionBatch = 0n;
  let field$sellerAuctionBatch = 0n;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = types.string(data);
        break

      case 2:
        field$marketId = types.string(data);
        break

      case 3:
        field$price = types.string(data);
        break

      case 4:
        field$size = types.uint64(data);
        break

      case 5:
        field$buyer = types.string(data);
        break

      case 6:
        field$seller = types.string(data);
        break

      case 7:
        field$aggressor = Side.decode(data);
        break

      case 8:
        field$buyOrder = types.string(data);
        break

      case 9:
        field$sellOrder = types.string(data);
        break

      case 10:
        field$timestamp = types.int64(data);
        break

      case 11:
        field$type = Type.decode(data);
        break

      case 12:
        field$buyerFee = decode$1.decode(data);
        break

      case 13:
        field$sellerFee = decode$1.decode(data);
        break

      case 14:
        field$buyerAuctionBatch = types.uint64(data);
        break

      case 15:
        field$sellerAuctionBatch = types.uint64(data);
        break
    }
  }
  return {
    id: field$id,
    marketId: field$marketId,
    price: field$price,
    size: field$size,
    buyer: field$buyer,
    seller: field$seller,
    aggressor: field$aggressor,
    buyOrder: field$buyOrder,
    sellOrder: field$sellOrder,
    timestamp: field$timestamp,
    type: field$type,
    buyerFee: field$buyerFee,
    sellerFee: field$sellerFee,
    buyerAuctionBatch: field$buyerAuctionBatch,
    sellerAuctionBatch: field$sellerAuctionBatch
  }
}

exports.decode = decode;
