'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$1 = require('../NodeSet/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$stakedTotal = '';
  let field$totalNodes = 0;
  let field$inactiveNodes = 0;
  let field$tendermintNodes = {};
  let field$ersatzNodes = {};
  let field$pendingNodes = {};
  let field$uptime = 0;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$stakedTotal = types.string(data);
        break

      case 2:
        field$totalNodes = types.uint32(data);
        break

      case 3:
        field$inactiveNodes = types.uint32(data);
        break

      case 4:
        field$tendermintNodes = decode$1.decode(data);
        break

      case 5:
        field$ersatzNodes = decode$1.decode(data);
        break

      case 6:
        field$pendingNodes = decode$1.decode(data);
        break

      case 7:
        field$uptime = types.float(data);
        break
    }
  }
  return {
    stakedTotal: field$stakedTotal,
    totalNodes: field$totalNodes,
    inactiveNodes: field$inactiveNodes,
    tendermintNodes: field$tendermintNodes,
    ersatzNodes: field$ersatzNodes,
    pendingNodes: field$pendingNodes,
    uptime: field$uptime
  }
}

exports.decode = decode;
