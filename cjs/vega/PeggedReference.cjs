'use strict';

var assert = require('nanoassert');
var types = require('protobuf-codec/encode/types');
var types$1 = require('protobuf-codec/decode/types');

/// autogenerated by protoc-plugin-js

const PEGGED_REFERENCE_UNSPECIFIED = 0;
const PEGGED_REFERENCE_MID = 1;
const PEGGED_REFERENCE_BEST_BID = 2;
const PEGGED_REFERENCE_BEST_ASK = 3;

const enumValues = new Map([
  [0, 'PEGGED_REFERENCE_UNSPECIFIED'],
  [1, 'PEGGED_REFERENCE_MID'],
  [2, 'PEGGED_REFERENCE_BEST_BID'],
  [3, 'PEGGED_REFERENCE_BEST_ASK']
]);
const enumNames = new Map([
  ['PEGGED_REFERENCE_UNSPECIFIED', 0],
  ['PEGGED_REFERENCE_MID', 1],
  ['PEGGED_REFERENCE_BEST_BID', 2],
  ['PEGGED_REFERENCE_BEST_ASK', 3]
]);

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid PeggedReference value (' + value + ')')

  return types.enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = types$1.enumerable(varint);

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid PeggedReference value (' + value + ')');

  if (0 <= value && value <= 3) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

exports.PEGGED_REFERENCE_BEST_ASK = PEGGED_REFERENCE_BEST_ASK;
exports.PEGGED_REFERENCE_BEST_BID = PEGGED_REFERENCE_BEST_BID;
exports.PEGGED_REFERENCE_MID = PEGGED_REFERENCE_MID;
exports.PEGGED_REFERENCE_UNSPECIFIED = PEGGED_REFERENCE_UNSPECIFIED;
exports.decode = decode;
exports.encode = encode;
exports.encodingLength = encodingLength;
exports.parse = parse;
exports.stringify = stringify;
