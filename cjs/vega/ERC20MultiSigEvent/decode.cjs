'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$3 = require('../ERC20SignerAdded/decode.cjs');
var decode$2 = require('../ERC20SignerRemoved/decode.cjs');
var decode$1 = require('../ERC20ThresholdSet/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$index = 0n;
  let field$block = 0n;
  let field$action = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$index = types.uint64(data);
        break

      case 2:
        field$block = types.uint64(data);
        break

      case 1001:
        field$action = { signerAdded: decode$3.decode(data) };
        break

      case 1002:
        field$action = { signerRemoved: decode$2.decode(data) };
        break

      case 1003:
        field$action = { thresholdSet: decode$1.decode(data) };
        break
    }
  }
  return { index: field$index, block: field$block, action: field$action }
}

exports.decode = decode;
