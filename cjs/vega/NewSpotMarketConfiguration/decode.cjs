'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$5 = require('../InstrumentConfiguration/decode.cjs');
var decode$4 = require('../PriceMonitoringParameters/decode.cjs');
var decode$3 = require('../TargetStakeParameters/decode.cjs');
var decode$2 = require('../SimpleModelParams/decode.cjs');
var decode$1 = require('../LogNormalRiskModel/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$instrument = {};
  let field$decimalPlaces = 0n;
  const field$metadata = [];
  let field$priceMonitoringParameters = {};
  let field$targetStakeParameters = {};
  let field$positionDecimalPlaces = 0n;
  let field$risk_parameters = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$instrument = decode$5.decode(data);
        break

      case 2:
        field$decimalPlaces = types.uint64(data);
        break

      case 3:
        field$metadata.push(types.string(data));
        break

      case 4:
        field$priceMonitoringParameters =
          decode$4.decode(data);
        break

      case 5:
        field$targetStakeParameters = decode$3.decode(data);
        break

      case 100:
        field$risk_parameters = { simple: decode$2.decode(data) };
        break

      case 101:
        field$risk_parameters = {
          logNormal: decode$1.decode(data)
        };
        break

      case 6:
        field$positionDecimalPlaces = types.int64(data);
        break
    }
  }
  return {
    instrument: field$instrument,
    decimalPlaces: field$decimalPlaces,
    metadata: field$metadata,
    priceMonitoringParameters: field$priceMonitoringParameters,
    targetStakeParameters: field$targetStakeParameters,
    positionDecimalPlaces: field$positionDecimalPlaces,
    risk_parameters: field$risk_parameters
  }
}

exports.decode = decode;
