'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var TradingMode = require('../Market/TradingMode.cjs');
var AuctionTrigger = require('../AuctionTrigger.cjs');
var encode$1 = require('../PriceMonitoringBounds/encode.cjs');
var encode$2 = require('../LiquidityProviderFeeShare/encode.cjs');
var State = require('../Market/State.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.markPrice) writer.bytes(1, obj.markPrice, types.string);
  if (obj.bestBidPrice) writer.bytes(2, obj.bestBidPrice, types.string);
  if (obj.bestBidVolume) writer.varint(3, obj.bestBidVolume, types.uint64);
  if (obj.bestOfferPrice) writer.bytes(4, obj.bestOfferPrice, types.string);
  if (obj.bestOfferVolume) writer.varint(5, obj.bestOfferVolume, types.uint64);
  if (obj.bestStaticBidPrice) writer.bytes(6, obj.bestStaticBidPrice, types.string);
  if (obj.bestStaticBidVolume) writer.varint(7, obj.bestStaticBidVolume, types.uint64);
  if (obj.bestStaticOfferPrice)
    writer.bytes(8, obj.bestStaticOfferPrice, types.string);
  if (obj.bestStaticOfferVolume)
    writer.varint(9, obj.bestStaticOfferVolume, types.uint64);
  if (obj.midPrice) writer.bytes(10, obj.midPrice, types.string);
  if (obj.staticMidPrice) writer.bytes(11, obj.staticMidPrice, types.string);
  if (obj.market) writer.bytes(12, obj.market, types.string);
  if (obj.timestamp) writer.varint(13, obj.timestamp, types.int64);
  if (obj.openInterest) writer.varint(14, obj.openInterest, types.uint64);
  if (obj.auctionEnd) writer.varint(15, obj.auctionEnd, types.int64);
  if (obj.auctionStart) writer.varint(16, obj.auctionStart, types.int64);
  if (obj.indicativePrice) writer.bytes(17, obj.indicativePrice, types.string);
  if (obj.indicativeVolume) writer.varint(18, obj.indicativeVolume, types.uint64);
  if (obj.marketTradingMode)
    writer.varint(19, obj.marketTradingMode, TradingMode);
  if (obj.trigger) writer.varint(20, obj.trigger, AuctionTrigger);
  if (obj.extensionTrigger)
    writer.varint(21, obj.extensionTrigger, AuctionTrigger);
  if (obj.targetStake) writer.bytes(22, obj.targetStake, types.string);
  if (obj.suppliedStake) writer.bytes(23, obj.suppliedStake, types.string);
  if (obj.priceMonitoringBounds?.length)
    obj.priceMonitoringBounds.forEach((v) =>
      writer.bytes(24, encode$1.encode(v))
    );
  if (obj.marketValueProxy) writer.bytes(25, obj.marketValueProxy, types.string);
  if (obj.liquidityProviderFeeShare?.length)
    obj.liquidityProviderFeeShare.forEach((v) =>
      writer.bytes(26, encode$2.encode(v))
    );
  if (obj.marketState) writer.varint(27, obj.marketState, State);
  if (obj.nextMarkToMarket) writer.varint(28, obj.nextMarkToMarket, types.int64);
  if (obj.lastTradedPrice) writer.bytes(29, obj.lastTradedPrice, types.string);
  if (obj.marketGrowth) writer.bytes(30, obj.marketGrowth, types.string);

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
