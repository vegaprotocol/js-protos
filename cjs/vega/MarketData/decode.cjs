'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var TradingMode = require('../Market/TradingMode.cjs');
var AuctionTrigger = require('../AuctionTrigger.cjs');
var decode$2 = require('../PriceMonitoringBounds/decode.cjs');
var decode$1 = require('../LiquidityProviderFeeShare/decode.cjs');
var State = require('../Market/State.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$markPrice = '';
  let field$bestBidPrice = '';
  let field$bestBidVolume = 0n;
  let field$bestOfferPrice = '';
  let field$bestOfferVolume = 0n;
  let field$bestStaticBidPrice = '';
  let field$bestStaticBidVolume = 0n;
  let field$bestStaticOfferPrice = '';
  let field$bestStaticOfferVolume = 0n;
  let field$midPrice = '';
  let field$staticMidPrice = '';
  let field$market = '';
  let field$timestamp = 0n;
  let field$openInterest = 0n;
  let field$auctionEnd = 0n;
  let field$auctionStart = 0n;
  let field$indicativePrice = '';
  let field$indicativeVolume = 0n;
  let field$marketTradingMode = 0;
  let field$trigger = 0;
  let field$extensionTrigger = 0;
  let field$targetStake = '';
  let field$suppliedStake = '';
  const field$priceMonitoringBounds = [];
  let field$marketValueProxy = '';
  const field$liquidityProviderFeeShare = [];
  let field$marketState = 0;
  let field$nextMarkToMarket = 0n;
  let field$lastTradedPrice = '';
  let field$marketGrowth = '';
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$markPrice = types.string(data);
        break

      case 2:
        field$bestBidPrice = types.string(data);
        break

      case 3:
        field$bestBidVolume = types.uint64(data);
        break

      case 4:
        field$bestOfferPrice = types.string(data);
        break

      case 5:
        field$bestOfferVolume = types.uint64(data);
        break

      case 6:
        field$bestStaticBidPrice = types.string(data);
        break

      case 7:
        field$bestStaticBidVolume = types.uint64(data);
        break

      case 8:
        field$bestStaticOfferPrice = types.string(data);
        break

      case 9:
        field$bestStaticOfferVolume = types.uint64(data);
        break

      case 10:
        field$midPrice = types.string(data);
        break

      case 11:
        field$staticMidPrice = types.string(data);
        break

      case 12:
        field$market = types.string(data);
        break

      case 13:
        field$timestamp = types.int64(data);
        break

      case 14:
        field$openInterest = types.uint64(data);
        break

      case 15:
        field$auctionEnd = types.int64(data);
        break

      case 16:
        field$auctionStart = types.int64(data);
        break

      case 17:
        field$indicativePrice = types.string(data);
        break

      case 18:
        field$indicativeVolume = types.uint64(data);
        break

      case 19:
        field$marketTradingMode = TradingMode.decode(data);
        break

      case 20:
        field$trigger = AuctionTrigger.decode(data);
        break

      case 21:
        field$extensionTrigger = AuctionTrigger.decode(data);
        break

      case 22:
        field$targetStake = types.string(data);
        break

      case 23:
        field$suppliedStake = types.string(data);
        break

      case 24:
        field$priceMonitoringBounds.push(
          decode$2.decode(data)
        );
        break

      case 25:
        field$marketValueProxy = types.string(data);
        break

      case 26:
        field$liquidityProviderFeeShare.push(
          decode$1.decode(data)
        );
        break

      case 27:
        field$marketState = State.decode(data);
        break

      case 28:
        field$nextMarkToMarket = types.int64(data);
        break

      case 29:
        field$lastTradedPrice = types.string(data);
        break

      case 30:
        field$marketGrowth = types.string(data);
        break
    }
  }
  return {
    markPrice: field$markPrice,
    bestBidPrice: field$bestBidPrice,
    bestBidVolume: field$bestBidVolume,
    bestOfferPrice: field$bestOfferPrice,
    bestOfferVolume: field$bestOfferVolume,
    bestStaticBidPrice: field$bestStaticBidPrice,
    bestStaticBidVolume: field$bestStaticBidVolume,
    bestStaticOfferPrice: field$bestStaticOfferPrice,
    bestStaticOfferVolume: field$bestStaticOfferVolume,
    midPrice: field$midPrice,
    staticMidPrice: field$staticMidPrice,
    market: field$market,
    timestamp: field$timestamp,
    openInterest: field$openInterest,
    auctionEnd: field$auctionEnd,
    auctionStart: field$auctionStart,
    indicativePrice: field$indicativePrice,
    indicativeVolume: field$indicativeVolume,
    marketTradingMode: field$marketTradingMode,
    trigger: field$trigger,
    extensionTrigger: field$extensionTrigger,
    targetStake: field$targetStake,
    suppliedStake: field$suppliedStake,
    priceMonitoringBounds: field$priceMonitoringBounds,
    marketValueProxy: field$marketValueProxy,
    liquidityProviderFeeShare: field$liquidityProviderFeeShare,
    marketState: field$marketState,
    nextMarkToMarket: field$nextMarkToMarket,
    lastTradedPrice: field$lastTradedPrice,
    marketGrowth: field$marketGrowth
  }
}

exports.decode = decode;
