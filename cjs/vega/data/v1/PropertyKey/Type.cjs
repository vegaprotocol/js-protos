'use strict';

var assert = require('nanoassert');
var types = require('protobuf-codec/encode/types');
var types$1 = require('protobuf-codec/decode/types');

/// autogenerated by protoc-plugin-js

const TYPE_UNSPECIFIED = 0;
const TYPE_EMPTY = 1;
const TYPE_INTEGER = 2;
const TYPE_STRING = 3;
const TYPE_BOOLEAN = 4;
const TYPE_DECIMAL = 5;
const TYPE_TIMESTAMP = 6;

const enumValues = new Map([
  [0, 'TYPE_UNSPECIFIED'],
  [1, 'TYPE_EMPTY'],
  [2, 'TYPE_INTEGER'],
  [3, 'TYPE_STRING'],
  [4, 'TYPE_BOOLEAN'],
  [5, 'TYPE_DECIMAL'],
  [6, 'TYPE_TIMESTAMP']
]);
const enumNames = new Map([
  ['TYPE_UNSPECIFIED', 0],
  ['TYPE_EMPTY', 1],
  ['TYPE_INTEGER', 2],
  ['TYPE_STRING', 3],
  ['TYPE_BOOLEAN', 4],
  ['TYPE_DECIMAL', 5],
  ['TYPE_TIMESTAMP', 6]
]);

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid Type value (' + value + ')')

  return types.enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = types$1.enumerable(varint);

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid Type value (' + value + ')');

  if (0 <= value && value <= 6) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

exports.TYPE_BOOLEAN = TYPE_BOOLEAN;
exports.TYPE_DECIMAL = TYPE_DECIMAL;
exports.TYPE_EMPTY = TYPE_EMPTY;
exports.TYPE_INTEGER = TYPE_INTEGER;
exports.TYPE_STRING = TYPE_STRING;
exports.TYPE_TIMESTAMP = TYPE_TIMESTAMP;
exports.TYPE_UNSPECIFIED = TYPE_UNSPECIFIED;
exports.decode = decode;
exports.encode = encode;
exports.encodingLength = encodingLength;
exports.parse = parse;
exports.stringify = stringify;
