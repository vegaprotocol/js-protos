'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var encode$1 = require('../ERC20AssetList/encode.cjs');
var encode$2 = require('../ERC20AssetDelist/encode.cjs');
var encode$3 = require('../ERC20Deposit/encode.cjs');
var encode$4 = require('../ERC20Withdrawal/encode.cjs');
var encode$5 = require('../ERC20AssetLimitsUpdated/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.index) writer.varint(1, obj.index, types.uint64);
  if (obj.block) writer.varint(2, obj.block, types.uint64);

  if (obj.action?.assetList ?? obj.assetList)
    writer.bytes(
      1001,
      encode$1.encode(obj.action?.assetList ?? obj.assetList)
    );
  if (obj.action?.assetDelist ?? obj.assetDelist)
    writer.bytes(
      1002,
      encode$2.encode(obj.action?.assetDelist ?? obj.assetDelist)
    );
  if (obj.action?.deposit ?? obj.deposit)
    writer.bytes(
      1003,
      encode$3.encode(obj.action?.deposit ?? obj.deposit)
    );
  if (obj.action?.withdrawal ?? obj.withdrawal)
    writer.bytes(
      1004,
      encode$4.encode(obj.action?.withdrawal ?? obj.withdrawal)
    );
  if (obj.action?.assetLimitsUpdated ?? obj.assetLimitsUpdated)
    writer.bytes(
      1005,
      encode$5.encode(
        obj.action?.assetLimitsUpdated ?? obj.assetLimitsUpdated
      )
    );
  if (obj.action?.bridgeStopped ?? obj.bridgeStopped)
    writer.varint(1006, obj.action?.bridgeStopped ?? obj.bridgeStopped, types.bool);
  if (obj.action?.bridgeResumed ?? obj.bridgeResumed)
    writer.varint(1007, obj.action?.bridgeResumed ?? obj.bridgeResumed, types.bool);

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
