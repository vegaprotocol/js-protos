'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$1 = require('../EthereumContractConfig/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$networkId = '';
  let field$chainId = '';
  let field$collateralBridgeContract = {};
  let field$confirmations = 0;
  let field$stakingBridgeContract = {};
  let field$tokenVestingContract = {};
  let field$multisigControlContract = {};
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$networkId = types.string(data);
        break

      case 2:
        field$chainId = types.string(data);
        break

      case 3:
        field$collateralBridgeContract =
          decode$1.decode(data);
        break

      case 4:
        field$confirmations = types.uint32(data);
        break

      case 5:
        field$stakingBridgeContract = decode$1.decode(data);
        break

      case 6:
        field$tokenVestingContract = decode$1.decode(data);
        break

      case 7:
        field$multisigControlContract =
          decode$1.decode(data);
        break
    }
  }
  return {
    networkId: field$networkId,
    chainId: field$chainId,
    collateralBridgeContract: field$collateralBridgeContract,
    confirmations: field$confirmations,
    stakingBridgeContract: field$stakingBridgeContract,
    tokenVestingContract: field$tokenVestingContract,
    multisigControlContract: field$multisigControlContract
  }
}

exports.decode = decode;
