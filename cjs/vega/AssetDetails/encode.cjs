'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var encode$1 = require('../BuiltinAsset/encode.cjs');
var encode$2 = require('../ERC20/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.name) writer.bytes(1, obj.name, types.string);
  if (obj.symbol) writer.bytes(2, obj.symbol, types.string);
  if (obj.decimals) writer.varint(4, obj.decimals, types.uint64);
  if (obj.quantum) writer.bytes(5, obj.quantum, types.string);

  if (obj.source?.builtinAsset ?? obj.builtinAsset)
    writer.bytes(
      101,
      encode$1.encode(obj.source?.builtinAsset ?? obj.builtinAsset)
    );
  if (obj.source?.erc20 ?? obj.erc20)
    writer.bytes(102, encode$2.encode(obj.source?.erc20 ?? obj.erc20));

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
