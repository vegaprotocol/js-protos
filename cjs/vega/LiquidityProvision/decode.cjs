'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$1 = require('../LiquidityOrderReference/decode.cjs');
var Status = require('./Status.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = '';
  let field$partyId = '';
  let field$createdAt = 0n;
  let field$updatedAt = 0n;
  let field$marketId = '';
  let field$commitmentAmount = '';
  let field$fee = '';
  const field$sells = [];
  const field$buys = [];
  let field$version = 0n;
  let field$status = 0;
  let field$reference = '';
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = types.string(data);
        break

      case 2:
        field$partyId = types.string(data);
        break

      case 3:
        field$createdAt = types.int64(data);
        break

      case 4:
        field$updatedAt = types.int64(data);
        break

      case 5:
        field$marketId = types.string(data);
        break

      case 6:
        field$commitmentAmount = types.string(data);
        break

      case 7:
        field$fee = types.string(data);
        break

      case 8:
        field$sells.push(decode$1.decode(data));
        break

      case 9:
        field$buys.push(decode$1.decode(data));
        break

      case 10:
        field$version = types.uint64(data);
        break

      case 11:
        field$status = Status.decode(data);
        break

      case 12:
        field$reference = types.string(data);
        break
    }
  }
  return {
    id: field$id,
    partyId: field$partyId,
    createdAt: field$createdAt,
    updatedAt: field$updatedAt,
    marketId: field$marketId,
    commitmentAmount: field$commitmentAmount,
    fee: field$fee,
    sells: field$sells,
    buys: field$buys,
    version: field$version,
    status: field$status,
    reference: field$reference
  }
}

exports.decode = decode;
