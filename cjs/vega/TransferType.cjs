'use strict';

var assert = require('nanoassert');
var types = require('protobuf-codec/encode/types');
var types$1 = require('protobuf-codec/decode/types');

/// autogenerated by protoc-plugin-js

const TRANSFER_TYPE_UNSPECIFIED = 0;
const TRANSFER_TYPE_LOSS = 1;
const TRANSFER_TYPE_WIN = 2;
const TRANSFER_TYPE_MTM_LOSS = 4;
const TRANSFER_TYPE_MTM_WIN = 5;
const TRANSFER_TYPE_MARGIN_LOW = 6;
const TRANSFER_TYPE_MARGIN_HIGH = 7;
const TRANSFER_TYPE_MARGIN_CONFISCATED = 8;
const TRANSFER_TYPE_MAKER_FEE_PAY = 9;
const TRANSFER_TYPE_MAKER_FEE_RECEIVE = 10;
const TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = 11;
const TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE = 12;
const TRANSFER_TYPE_LIQUIDITY_FEE_PAY = 13;
const TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE = 14;
const TRANSFER_TYPE_BOND_LOW = 15;
const TRANSFER_TYPE_BOND_HIGH = 16;
const TRANSFER_TYPE_WITHDRAW = 18;
const TRANSFER_TYPE_DEPOSIT = 19;
const TRANSFER_TYPE_BOND_SLASHING = 20;
const TRANSFER_TYPE_REWARD_PAYOUT = 21;
const TRANSFER_TYPE_TRANSFER_FUNDS_SEND = 22;
const TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE = 23;
const TRANSFER_TYPE_CLEAR_ACCOUNT = 24;
const TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE = 25;
const TRANSFER_TYPE_SPOT = 26;
const TRANSFER_TYPE_HOLDING_LOCK = 27;
const TRANSFER_TYPE_HOLDING_RELEASE = 28;
const TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION = 29;
const TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE = 30;
const TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE = 31;
const TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY = 32;
const TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY = 33;
const TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT = 34;
const TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE = 35;

const enumValues = new Map([
  [0, 'TRANSFER_TYPE_UNSPECIFIED'],
  [1, 'TRANSFER_TYPE_LOSS'],
  [2, 'TRANSFER_TYPE_WIN'],
  [4, 'TRANSFER_TYPE_MTM_LOSS'],
  [5, 'TRANSFER_TYPE_MTM_WIN'],
  [6, 'TRANSFER_TYPE_MARGIN_LOW'],
  [7, 'TRANSFER_TYPE_MARGIN_HIGH'],
  [8, 'TRANSFER_TYPE_MARGIN_CONFISCATED'],
  [9, 'TRANSFER_TYPE_MAKER_FEE_PAY'],
  [10, 'TRANSFER_TYPE_MAKER_FEE_RECEIVE'],
  [11, 'TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY'],
  [12, 'TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE'],
  [13, 'TRANSFER_TYPE_LIQUIDITY_FEE_PAY'],
  [14, 'TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE'],
  [15, 'TRANSFER_TYPE_BOND_LOW'],
  [16, 'TRANSFER_TYPE_BOND_HIGH'],
  [18, 'TRANSFER_TYPE_WITHDRAW'],
  [19, 'TRANSFER_TYPE_DEPOSIT'],
  [20, 'TRANSFER_TYPE_BOND_SLASHING'],
  [21, 'TRANSFER_TYPE_REWARD_PAYOUT'],
  [22, 'TRANSFER_TYPE_TRANSFER_FUNDS_SEND'],
  [23, 'TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE'],
  [24, 'TRANSFER_TYPE_CLEAR_ACCOUNT'],
  [25, 'TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE'],
  [26, 'TRANSFER_TYPE_SPOT'],
  [27, 'TRANSFER_TYPE_HOLDING_LOCK'],
  [28, 'TRANSFER_TYPE_HOLDING_RELEASE'],
  [29, 'TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION'],
  [30, 'TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE'],
  [31, 'TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE'],
  [32, 'TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY'],
  [33, 'TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY'],
  [34, 'TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT'],
  [35, 'TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE']
]);
const enumNames = new Map([
  ['TRANSFER_TYPE_UNSPECIFIED', 0],
  ['TRANSFER_TYPE_LOSS', 1],
  ['TRANSFER_TYPE_WIN', 2],
  ['TRANSFER_TYPE_MTM_LOSS', 4],
  ['TRANSFER_TYPE_MTM_WIN', 5],
  ['TRANSFER_TYPE_MARGIN_LOW', 6],
  ['TRANSFER_TYPE_MARGIN_HIGH', 7],
  ['TRANSFER_TYPE_MARGIN_CONFISCATED', 8],
  ['TRANSFER_TYPE_MAKER_FEE_PAY', 9],
  ['TRANSFER_TYPE_MAKER_FEE_RECEIVE', 10],
  ['TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY', 11],
  ['TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE', 12],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_PAY', 13],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE', 14],
  ['TRANSFER_TYPE_BOND_LOW', 15],
  ['TRANSFER_TYPE_BOND_HIGH', 16],
  ['TRANSFER_TYPE_WITHDRAW', 18],
  ['TRANSFER_TYPE_DEPOSIT', 19],
  ['TRANSFER_TYPE_BOND_SLASHING', 20],
  ['TRANSFER_TYPE_REWARD_PAYOUT', 21],
  ['TRANSFER_TYPE_TRANSFER_FUNDS_SEND', 22],
  ['TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE', 23],
  ['TRANSFER_TYPE_CLEAR_ACCOUNT', 24],
  ['TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE', 25],
  ['TRANSFER_TYPE_SPOT', 26],
  ['TRANSFER_TYPE_HOLDING_LOCK', 27],
  ['TRANSFER_TYPE_HOLDING_RELEASE', 28],
  ['TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION', 29],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE', 30],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE', 31],
  ['TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY', 32],
  ['TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY', 33],
  ['TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT', 34],
  ['TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE', 35]
]);

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null)
    throw new Error('Invalid TransferType value (' + value + ')')

  return types.enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = types$1.enumerable(varint);

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid TransferType value (' + value + ')');

  if (0 <= value && value <= 35) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

exports.TRANSFER_TYPE_BOND_HIGH = TRANSFER_TYPE_BOND_HIGH;
exports.TRANSFER_TYPE_BOND_LOW = TRANSFER_TYPE_BOND_LOW;
exports.TRANSFER_TYPE_BOND_SLASHING = TRANSFER_TYPE_BOND_SLASHING;
exports.TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE = TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE;
exports.TRANSFER_TYPE_CLEAR_ACCOUNT = TRANSFER_TYPE_CLEAR_ACCOUNT;
exports.TRANSFER_TYPE_DEPOSIT = TRANSFER_TYPE_DEPOSIT;
exports.TRANSFER_TYPE_HOLDING_LOCK = TRANSFER_TYPE_HOLDING_LOCK;
exports.TRANSFER_TYPE_HOLDING_RELEASE = TRANSFER_TYPE_HOLDING_RELEASE;
exports.TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE = TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE;
exports.TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY = TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY;
exports.TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE = TRANSFER_TYPE_LIQUIDITY_FEE_ALLOCATE;
exports.TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE = TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE;
exports.TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE = TRANSFER_TYPE_LIQUIDITY_FEE_NET_DISTRIBUTE;
exports.TRANSFER_TYPE_LIQUIDITY_FEE_PAY = TRANSFER_TYPE_LIQUIDITY_FEE_PAY;
exports.TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT = TRANSFER_TYPE_LIQUIDITY_FEE_UNPAID_COLLECT;
exports.TRANSFER_TYPE_LOSS = TRANSFER_TYPE_LOSS;
exports.TRANSFER_TYPE_MAKER_FEE_PAY = TRANSFER_TYPE_MAKER_FEE_PAY;
exports.TRANSFER_TYPE_MAKER_FEE_RECEIVE = TRANSFER_TYPE_MAKER_FEE_RECEIVE;
exports.TRANSFER_TYPE_MARGIN_CONFISCATED = TRANSFER_TYPE_MARGIN_CONFISCATED;
exports.TRANSFER_TYPE_MARGIN_HIGH = TRANSFER_TYPE_MARGIN_HIGH;
exports.TRANSFER_TYPE_MARGIN_LOW = TRANSFER_TYPE_MARGIN_LOW;
exports.TRANSFER_TYPE_MTM_LOSS = TRANSFER_TYPE_MTM_LOSS;
exports.TRANSFER_TYPE_MTM_WIN = TRANSFER_TYPE_MTM_WIN;
exports.TRANSFER_TYPE_REWARD_PAYOUT = TRANSFER_TYPE_REWARD_PAYOUT;
exports.TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY = TRANSFER_TYPE_SLA_PENALTY_BOND_APPLY;
exports.TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY = TRANSFER_TYPE_SLA_PENALTY_LP_FEE_APPLY;
exports.TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE = TRANSFER_TYPE_SLA_PERFORMANCE_BONUS_DISTRIBUTE;
exports.TRANSFER_TYPE_SPOT = TRANSFER_TYPE_SPOT;
exports.TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION = TRANSFER_TYPE_SUCCESSOR_INSURANCE_FRACTION;
exports.TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE = TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE;
exports.TRANSFER_TYPE_TRANSFER_FUNDS_SEND = TRANSFER_TYPE_TRANSFER_FUNDS_SEND;
exports.TRANSFER_TYPE_UNSPECIFIED = TRANSFER_TYPE_UNSPECIFIED;
exports.TRANSFER_TYPE_WIN = TRANSFER_TYPE_WIN;
exports.TRANSFER_TYPE_WITHDRAW = TRANSFER_TYPE_WITHDRAW;
exports.decode = decode;
exports.encode = encode;
exports.encodingLength = encodingLength;
exports.parse = parse;
exports.stringify = stringify;
