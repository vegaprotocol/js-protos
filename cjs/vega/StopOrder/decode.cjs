'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var ExpiryStrategy = require('./ExpiryStrategy.cjs');
var TriggerDirection = require('./TriggerDirection.cjs');
var Status = require('./Status.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = '';
  let field$ocoLinkId = null;
  let field$expiresAt = null;
  let field$expiryStrategy = null;
  let field$triggerDirection = 0;
  let field$status = 0;
  let field$createdAt = 0n;
  let field$updatedAt = null;
  let field$orderId = '';
  let field$partyId = '';
  let field$marketId = '';
  let field$trigger = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = types.string(data);
        break

      case 2:
        field$ocoLinkId = types.string(data);
        break

      case 3:
        field$expiresAt = types.int64(data);
        break

      case 4:
        field$expiryStrategy = ExpiryStrategy.decode(data);
        break

      case 5:
        field$triggerDirection = TriggerDirection.decode(data);
        break

      case 6:
        field$status = Status.decode(data);
        break

      case 7:
        field$createdAt = types.int64(data);
        break

      case 8:
        field$updatedAt = types.int64(data);
        break

      case 9:
        field$orderId = types.string(data);
        break

      case 10:
        field$partyId = types.string(data);
        break

      case 11:
        field$marketId = types.string(data);
        break

      case 100:
        field$trigger = { price: types.string(data) };
        break

      case 101:
        field$trigger = { trailingPercentOffset: types.string(data) };
        break
    }
  }
  return {
    id: field$id,
    ocoLinkId: field$ocoLinkId,
    expiresAt: field$expiresAt,
    expiryStrategy: field$expiryStrategy,
    triggerDirection: field$triggerDirection,
    status: field$status,
    createdAt: field$createdAt,
    updatedAt: field$updatedAt,
    orderId: field$orderId,
    partyId: field$partyId,
    marketId: field$marketId,
    trigger: field$trigger
  }
}

exports.decode = decode;
