'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var Side = require('../Side.cjs');
var TimeInForce = require('./TimeInForce.cjs');
var Type = require('./Type.cjs');
var Status = require('./Status.cjs');
var OrderError = require('../OrderError.cjs');
var encode$1 = require('../PeggedOrder/encode.cjs');
var encode$2 = require('../IcebergOrder/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.id) writer.bytes(1, obj.id, types.string);
  if (obj.marketId) writer.bytes(2, obj.marketId, types.string);
  if (obj.partyId) writer.bytes(3, obj.partyId, types.string);
  if (obj.side) writer.varint(4, obj.side, Side);
  if (obj.price) writer.bytes(5, obj.price, types.string);
  if (obj.size) writer.varint(6, obj.size, types.uint64);
  if (obj.remaining) writer.varint(7, obj.remaining, types.uint64);
  if (obj.timeInForce)
    writer.varint(8, obj.timeInForce, TimeInForce);
  if (obj.type) writer.varint(9, obj.type, Type);
  if (obj.createdAt) writer.varint(10, obj.createdAt, types.int64);
  if (obj.status) writer.varint(11, obj.status, Status);
  if (obj.expiresAt) writer.varint(12, obj.expiresAt, types.int64);
  if (obj.reference) writer.bytes(13, obj.reference, types.string);
  if (obj.reason) writer.varint(14, obj.reason, OrderError);
  if (obj.updatedAt) writer.varint(15, obj.updatedAt, types.int64);
  if (obj.version) writer.varint(16, obj.version, types.uint64);
  if (obj.batchId) writer.varint(17, obj.batchId, types.uint64);
  if (obj.peggedOrder)
    writer.bytes(18, encode$1.encode(obj.peggedOrder));
  if (obj.liquidityProvisionId)
    writer.bytes(19, obj.liquidityProvisionId, types.string);
  if (obj.postOnly) writer.varint(20, obj.postOnly, types.bool);
  if (obj.reduceOnly) writer.varint(21, obj.reduceOnly, types.bool);
  if (obj.icebergOrder)
    writer.bytes(22, encode$2.encode(obj.icebergOrder));

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
