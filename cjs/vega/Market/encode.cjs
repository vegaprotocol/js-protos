'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var encode$1 = require('../TradableInstrument/encode.cjs');
var encode$2 = require('../Fees/encode.cjs');
var encode$3 = require('../AuctionDuration/encode.cjs');
var encode$4 = require('../PriceMonitoringSettings/encode.cjs');
var encode$5 = require('../LiquidityMonitoringParameters/encode.cjs');
var TradingMode = require('./TradingMode.cjs');
var State = require('./State.cjs');
var encode$6 = require('../MarketTimestamps/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.id) writer.bytes(1, obj.id, types.string);
  if (obj.tradableInstrument)
    writer.bytes(2, encode$1.encode(obj.tradableInstrument));
  if (obj.decimalPlaces) writer.varint(3, obj.decimalPlaces, types.uint64);
  if (obj.fees) writer.bytes(4, encode$2.encode(obj.fees));
  if (obj.openingAuction)
    writer.bytes(5, encode$3.encode(obj.openingAuction));
  if (obj.priceMonitoringSettings)
    writer.bytes(
      6,
      encode$4.encode(obj.priceMonitoringSettings)
    );
  if (obj.liquidityMonitoringParameters)
    writer.bytes(
      7,
      encode$5.encode(
        obj.liquidityMonitoringParameters
      )
    );
  if (obj.tradingMode)
    writer.varint(8, obj.tradingMode, TradingMode);
  if (obj.state) writer.varint(9, obj.state, State);
  if (obj.marketTimestamps)
    writer.bytes(10, encode$6.encode(obj.marketTimestamps));
  if (obj.positionDecimalPlaces)
    writer.varint(11, obj.positionDecimalPlaces, types.int64);
  if (obj.lpPriceRange) writer.bytes(12, obj.lpPriceRange, types.string);
  if (obj.linearSlippageFactor)
    writer.bytes(13, obj.linearSlippageFactor, types.string);
  if (obj.quadraticSlippageFactor)
    writer.bytes(14, obj.quadraticSlippageFactor, types.string);
  if (obj.parentMarketId) writer.bytes(15, obj.parentMarketId, types.string);
  if (obj.insurancePoolFraction)
    writer.bytes(16, obj.insurancePoolFraction, types.string);
  if (obj.successorMarketId) writer.bytes(17, obj.successorMarketId, types.string);

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
