'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$a = require('../UpdateMarket/decode.cjs');
var decode$9 = require('../NewMarket/decode.cjs');
var decode$8 = require('../UpdateNetworkParameter/decode.cjs');
var decode$7 = require('../NewAsset/decode.cjs');
var decode$6 = require('../NewFreeform/decode.cjs');
var decode$5 = require('../UpdateAsset/decode.cjs');
var decode$4 = require('../NewSpotMarket/decode.cjs');
var decode$3 = require('../UpdateSpotMarket/decode.cjs');
var decode$2 = require('../NewTransfer/decode.cjs');
var decode$1 = require('../CancelTransfer/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$closingTimestamp = 0n;
  let field$enactmentTimestamp = 0n;
  let field$validationTimestamp = 0n;
  let field$change = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$closingTimestamp = types.int64(data);
        break

      case 2:
        field$enactmentTimestamp = types.int64(data);
        break

      case 3:
        field$validationTimestamp = types.int64(data);
        break

      case 101:
        field$change = { updateMarket: decode$a.decode(data) };
        break

      case 102:
        field$change = { newMarket: decode$9.decode(data) };
        break

      case 103:
        field$change = {
          updateNetworkParameter: decode$8.decode(data)
        };
        break

      case 104:
        field$change = { newAsset: decode$7.decode(data) };
        break

      case 105:
        field$change = { newFreeform: decode$6.decode(data) };
        break

      case 106:
        field$change = { updateAsset: decode$5.decode(data) };
        break

      case 107:
        field$change = { newSpotMarket: decode$4.decode(data) };
        break

      case 108:
        field$change = { updateSpotMarket: decode$3.decode(data) };
        break

      case 109:
        field$change = { newTransfer: decode$2.decode(data) };
        break

      case 110:
        field$change = { cancelTransfer: decode$1.decode(data) };
        break
    }
  }
  return {
    closingTimestamp: field$closingTimestamp,
    enactmentTimestamp: field$enactmentTimestamp,
    validationTimestamp: field$validationTimestamp,
    change: field$change
  }
}

exports.decode = decode;
