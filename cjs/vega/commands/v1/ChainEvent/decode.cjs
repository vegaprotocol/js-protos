'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$5 = require('../../../BuiltinAssetEvent/decode.cjs');
var decode$4 = require('../../../ERC20Event/decode.cjs');
var decode$3 = require('../../../StakingEvent/decode.cjs');
var decode$2 = require('../../../ERC20MultiSigEvent/decode.cjs');
var decode$1 = require('../../../EthContractCallEvent/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$txId = '';
  let field$nonce = 0n;
  let field$event = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$txId = types.string(data);
        break

      case 2:
        field$nonce = types.uint64(data);
        break

      case 1001:
        field$event = { builtin: decode$5.decode(data) };
        break

      case 1002:
        field$event = { erc20: decode$4.decode(data) };
        break

      case 1005:
        field$event = { stakingEvent: decode$3.decode(data) };
        break

      case 1006:
        field$event = { erc20Multisig: decode$2.decode(data) };
        break

      case 1007:
        field$event = { contractCall: decode$1.decode(data) };
        break
    }
  }
  return { txId: field$txId, nonce: field$nonce, event: field$event }
}

exports.decode = decode;
