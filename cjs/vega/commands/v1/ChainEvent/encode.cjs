'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var encode$1 = require('../../../BuiltinAssetEvent/encode.cjs');
var encode$2 = require('../../../ERC20Event/encode.cjs');
var encode$3 = require('../../../StakingEvent/encode.cjs');
var encode$4 = require('../../../ERC20MultiSigEvent/encode.cjs');
var encode$5 = require('../../../EthContractCallEvent/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.txId) writer.bytes(1, obj.txId, types.string);
  if (obj.nonce) writer.varint(2, obj.nonce, types.uint64);

  if (obj.event?.builtin ?? obj.builtin)
    writer.bytes(
      1001,
      encode$1.encode(obj.event?.builtin ?? obj.builtin)
    );
  if (obj.event?.erc20 ?? obj.erc20)
    writer.bytes(1002, encode$2.encode(obj.event?.erc20 ?? obj.erc20));
  if (obj.event?.stakingEvent ?? obj.stakingEvent)
    writer.bytes(
      1005,
      encode$3.encode(obj.event?.stakingEvent ?? obj.stakingEvent)
    );
  if (obj.event?.erc20Multisig ?? obj.erc20Multisig)
    writer.bytes(
      1006,
      encode$4.encode(
        obj.event?.erc20Multisig ?? obj.erc20Multisig
      )
    );
  if (obj.event?.contractCall ?? obj.contractCall)
    writer.bytes(
      1007,
      encode$5.encode(
        obj.event?.contractCall ?? obj.contractCall
      )
    );

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
