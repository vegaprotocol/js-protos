'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$1 = require('../Signature/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$vegaPubKey = '';
  let field$ethereumAddress = '';
  let field$chainPubKey = '';
  let field$infoUrl = '';
  let field$country = '';
  let field$id = '';
  let field$name = '';
  let field$avatarUrl = '';
  let field$vegaPubKeyIndex = 0;
  let field$fromEpoch = 0n;
  let field$ethereumSignature = {};
  let field$vegaSignature = {};
  let field$submitterAddress = '';
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$vegaPubKey = types.string(data);
        break

      case 2:
        field$ethereumAddress = types.string(data);
        break

      case 3:
        field$chainPubKey = types.string(data);
        break

      case 4:
        field$infoUrl = types.string(data);
        break

      case 5:
        field$country = types.string(data);
        break

      case 6:
        field$id = types.string(data);
        break

      case 7:
        field$name = types.string(data);
        break

      case 8:
        field$avatarUrl = types.string(data);
        break

      case 9:
        field$vegaPubKeyIndex = types.uint32(data);
        break

      case 10:
        field$fromEpoch = types.uint64(data);
        break

      case 11:
        field$ethereumSignature = decode$1.decode(data);
        break

      case 12:
        field$vegaSignature = decode$1.decode(data);
        break

      case 13:
        field$submitterAddress = types.string(data);
        break
    }
  }
  return {
    vegaPubKey: field$vegaPubKey,
    ethereumAddress: field$ethereumAddress,
    chainPubKey: field$chainPubKey,
    infoUrl: field$infoUrl,
    country: field$country,
    id: field$id,
    name: field$name,
    avatarUrl: field$avatarUrl,
    vegaPubKeyIndex: field$vegaPubKeyIndex,
    fromEpoch: field$fromEpoch,
    ethereumSignature: field$ethereumSignature,
    vegaSignature: field$vegaSignature,
    submitterAddress: field$submitterAddress
  }
}

exports.decode = decode;
