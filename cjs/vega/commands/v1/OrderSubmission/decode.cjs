'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var Side = require('../../../Side.cjs');
var TimeInForce = require('../../../Order/TimeInForce.cjs');
var Type = require('../../../Order/Type.cjs');
var decode$2 = require('../../../PeggedOrder/decode.cjs');
var decode$1 = require('../IcebergOpts/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$marketId = '';
  let field$price = '';
  let field$size = 0n;
  let field$side = 0;
  let field$timeInForce = 0;
  let field$expiresAt = 0n;
  let field$type = 0;
  let field$reference = '';
  let field$peggedOrder = {};
  let field$postOnly = false;
  let field$reduceOnly = false;
  let field$icebergOpts = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$marketId = types.string(data);
        break

      case 2:
        field$price = types.string(data);
        break

      case 3:
        field$size = types.uint64(data);
        break

      case 4:
        field$side = Side.decode(data);
        break

      case 5:
        field$timeInForce = TimeInForce.decode(data);
        break

      case 6:
        field$expiresAt = types.int64(data);
        break

      case 7:
        field$type = Type.decode(data);
        break

      case 8:
        field$reference = types.string(data);
        break

      case 9:
        field$peggedOrder = decode$2.decode(data);
        break

      case 10:
        field$postOnly = types.bool(data);
        break

      case 11:
        field$reduceOnly = types.bool(data);
        break

      case 12:
        field$icebergOpts = decode$1.decode(data);
        break
    }
  }
  return {
    marketId: field$marketId,
    price: field$price,
    size: field$size,
    side: field$side,
    timeInForce: field$timeInForce,
    expiresAt: field$expiresAt,
    type: field$type,
    reference: field$reference,
    peggedOrder: field$peggedOrder,
    postOnly: field$postOnly,
    reduceOnly: field$reduceOnly,
    icebergOpts: field$icebergOpts
  }
}

exports.decode = decode;
