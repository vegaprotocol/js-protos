'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$2 = require('../Signature/decode.cjs');
var TxVersion = require('../TxVersion.cjs');
var decode$1 = require('../ProofOfWork/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$inputData = new Uint8Array(0);
  let field$signature = {};
  let field$version = 0;
  let field$pow = {};
  let field$from = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$inputData = types.bytes(data);
        break

      case 2:
        field$signature = decode$2.decode(data);
        break

      case 1001:
        field$from = { address: types.string(data) };
        break

      case 1002:
        field$from = { pubKey: types.string(data) };
        break

      case 2000:
        field$version = TxVersion.decode(data);
        break

      case 3000:
        field$pow = decode$1.decode(data);
        break
    }
  }
  return {
    inputData: field$inputData,
    signature: field$signature,
    version: field$version,
    pow: field$pow,
    from: field$from
  }
}

exports.decode = decode;
