'use strict';

var assert = require('nanoassert');
var types = require('protobuf-codec/encode/types');
var types$1 = require('protobuf-codec/decode/types');

/// autogenerated by protoc-plugin-js

const TYPE_UNSPECIFIED = 0;
const TYPE_STAKE_DEPOSITED = 1;
const TYPE_STAKE_REMOVED = 2;
const TYPE_FUNDS_DEPOSITED = 3;
const TYPE_SIGNER_ADDED = 4;
const TYPE_SIGNER_REMOVED = 5;
const TYPE_BRIDGE_STOPPED = 6;
const TYPE_BRIDGE_RESUMED = 7;
const TYPE_ASSET_LISTED = 8;
const TYPE_LIMITS_UPDATED = 9;
const TYPE_STAKE_TOTAL_SUPPLY = 10;
const TYPE_SIGNER_THRESHOLD_SET = 11;
const TYPE_GOVERNANCE_VALIDATE_ASSET = 12;

const enumValues = new Map([
  [0, 'TYPE_UNSPECIFIED'],
  [1, 'TYPE_STAKE_DEPOSITED'],
  [2, 'TYPE_STAKE_REMOVED'],
  [3, 'TYPE_FUNDS_DEPOSITED'],
  [4, 'TYPE_SIGNER_ADDED'],
  [5, 'TYPE_SIGNER_REMOVED'],
  [6, 'TYPE_BRIDGE_STOPPED'],
  [7, 'TYPE_BRIDGE_RESUMED'],
  [8, 'TYPE_ASSET_LISTED'],
  [9, 'TYPE_LIMITS_UPDATED'],
  [10, 'TYPE_STAKE_TOTAL_SUPPLY'],
  [11, 'TYPE_SIGNER_THRESHOLD_SET'],
  [12, 'TYPE_GOVERNANCE_VALIDATE_ASSET']
]);
const enumNames = new Map([
  ['TYPE_UNSPECIFIED', 0],
  ['TYPE_STAKE_DEPOSITED', 1],
  ['TYPE_STAKE_REMOVED', 2],
  ['TYPE_FUNDS_DEPOSITED', 3],
  ['TYPE_SIGNER_ADDED', 4],
  ['TYPE_SIGNER_REMOVED', 5],
  ['TYPE_BRIDGE_STOPPED', 6],
  ['TYPE_BRIDGE_RESUMED', 7],
  ['TYPE_ASSET_LISTED', 8],
  ['TYPE_LIMITS_UPDATED', 9],
  ['TYPE_STAKE_TOTAL_SUPPLY', 10],
  ['TYPE_SIGNER_THRESHOLD_SET', 11],
  ['TYPE_GOVERNANCE_VALIDATE_ASSET', 12]
]);

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid Type value (' + value + ')')

  return types.enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = types$1.enumerable(varint);

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid Type value (' + value + ')');

  if (0 <= value && value <= 12) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

exports.TYPE_ASSET_LISTED = TYPE_ASSET_LISTED;
exports.TYPE_BRIDGE_RESUMED = TYPE_BRIDGE_RESUMED;
exports.TYPE_BRIDGE_STOPPED = TYPE_BRIDGE_STOPPED;
exports.TYPE_FUNDS_DEPOSITED = TYPE_FUNDS_DEPOSITED;
exports.TYPE_GOVERNANCE_VALIDATE_ASSET = TYPE_GOVERNANCE_VALIDATE_ASSET;
exports.TYPE_LIMITS_UPDATED = TYPE_LIMITS_UPDATED;
exports.TYPE_SIGNER_ADDED = TYPE_SIGNER_ADDED;
exports.TYPE_SIGNER_REMOVED = TYPE_SIGNER_REMOVED;
exports.TYPE_SIGNER_THRESHOLD_SET = TYPE_SIGNER_THRESHOLD_SET;
exports.TYPE_STAKE_DEPOSITED = TYPE_STAKE_DEPOSITED;
exports.TYPE_STAKE_REMOVED = TYPE_STAKE_REMOVED;
exports.TYPE_STAKE_TOTAL_SUPPLY = TYPE_STAKE_TOTAL_SUPPLY;
exports.TYPE_UNSPECIFIED = TYPE_UNSPECIFIED;
exports.decode = decode;
exports.encode = encode;
exports.encodingLength = encodingLength;
exports.parse = parse;
exports.stringify = stringify;
