'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$r = require('../OrderSubmission/decode.cjs');
var decode$q = require('../OrderCancellation/decode.cjs');
var decode$p = require('../OrderAmendment/decode.cjs');
var decode$o = require('../WithdrawSubmission/decode.cjs');
var decode$n = require('../ProposalSubmission/decode.cjs');
var decode$m = require('../VoteSubmission/decode.cjs');
var decode$l = require('../LiquidityProvisionSubmission/decode.cjs');
var decode$k = require('../DelegateSubmission/decode.cjs');
var decode$j = require('../UndelegateSubmission/decode.cjs');
var decode$i = require('../LiquidityProvisionCancellation/decode.cjs');
var decode$h = require('../LiquidityProvisionAmendment/decode.cjs');
var decode$g = require('../Transfer/decode.cjs');
var decode$f = require('../CancelTransfer/decode.cjs');
var decode$e = require('../AnnounceNode/decode.cjs');
var decode$d = require('../BatchMarketInstructions/decode.cjs');
var decode$c = require('../StopOrdersSubmission/decode.cjs');
var decode$b = require('../StopOrdersCancellation/decode.cjs');
var decode$a = require('../NodeVote/decode.cjs');
var decode$9 = require('../NodeSignature/decode.cjs');
var decode$8 = require('../ChainEvent/decode.cjs');
var decode$7 = require('../KeyRotateSubmission/decode.cjs');
var decode$6 = require('../StateVariableProposal/decode.cjs');
var decode$5 = require('../ValidatorHeartbeat/decode.cjs');
var decode$4 = require('../EthereumKeyRotateSubmission/decode.cjs');
var decode$3 = require('../ProtocolUpgradeProposal/decode.cjs');
var decode$2 = require('../IssueSignatures/decode.cjs');
var decode$1 = require('../OracleDataSubmission/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$nonce = 0n;
  let field$blockHeight = 0n;
  let field$command = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$nonce = types.uint64(data);
        break

      case 2:
        field$blockHeight = types.uint64(data);
        break

      case 1001:
        field$command = {
          orderSubmission: decode$r.decode(data)
        };
        break

      case 1002:
        field$command = {
          orderCancellation: decode$q.decode(data)
        };
        break

      case 1003:
        field$command = {
          orderAmendment: decode$p.decode(data)
        };
        break

      case 1004:
        field$command = {
          withdrawSubmission: decode$o.decode(data)
        };
        break

      case 1005:
        field$command = {
          proposalSubmission: decode$n.decode(data)
        };
        break

      case 1006:
        field$command = {
          voteSubmission: decode$m.decode(data)
        };
        break

      case 1007:
        field$command = {
          liquidityProvisionSubmission:
            decode$l.decode(data)
        };
        break

      case 1008:
        field$command = {
          delegateSubmission: decode$k.decode(data)
        };
        break

      case 1009:
        field$command = {
          undelegateSubmission:
            decode$j.decode(data)
        };
        break

      case 1010:
        field$command = {
          liquidityProvisionCancellation:
            decode$i.decode(data)
        };
        break

      case 1011:
        field$command = {
          liquidityProvisionAmendment:
            decode$h.decode(data)
        };
        break

      case 1012:
        field$command = { transfer: decode$g.decode(data) };
        break

      case 1013:
        field$command = {
          cancelTransfer: decode$f.decode(data)
        };
        break

      case 1014:
        field$command = {
          announceNode: decode$e.decode(data)
        };
        break

      case 1015:
        field$command = {
          batchMarketInstructions:
            decode$d.decode(data)
        };
        break

      case 1016:
        field$command = {
          stopOrdersSubmission:
            decode$c.decode(data)
        };
        break

      case 1017:
        field$command = {
          stopOrdersCancellation:
            decode$b.decode(data)
        };
        break

      case 2002:
        field$command = { nodeVote: decode$a.decode(data) };
        break

      case 2003:
        field$command = {
          nodeSignature: decode$9.decode(data)
        };
        break

      case 2004:
        field$command = {
          chainEvent: decode$8.decode(data)
        };
        break

      case 2005:
        field$command = {
          keyRotateSubmission:
            decode$7.decode(data)
        };
        break

      case 2006:
        field$command = {
          stateVariableProposal:
            decode$6.decode(data)
        };
        break

      case 2007:
        field$command = {
          validatorHeartbeat: decode$5.decode(data)
        };
        break

      case 2008:
        field$command = {
          ethereumKeyRotateSubmission:
            decode$4.decode(data)
        };
        break

      case 2009:
        field$command = {
          protocolUpgradeProposal:
            decode$3.decode(data)
        };
        break

      case 2010:
        field$command = {
          issueSignatures: decode$2.decode(data)
        };
        break

      case 3001:
        field$command = {
          oracleDataSubmission:
            decode$1.decode(data)
        };
        break
    }
  }
  return {
    nonce: field$nonce,
    blockHeight: field$blockHeight,
    command: field$command
  }
}

exports.decode = decode;
