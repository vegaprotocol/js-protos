'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var encode$1 = require('../OrderSubmission/encode.cjs');
var encode$2 = require('../OrderCancellation/encode.cjs');
var encode$3 = require('../OrderAmendment/encode.cjs');
var encode$4 = require('../WithdrawSubmission/encode.cjs');
var encode$5 = require('../ProposalSubmission/encode.cjs');
var encode$6 = require('../VoteSubmission/encode.cjs');
var encode$7 = require('../LiquidityProvisionSubmission/encode.cjs');
var encode$8 = require('../DelegateSubmission/encode.cjs');
var encode$9 = require('../UndelegateSubmission/encode.cjs');
var encode$a = require('../LiquidityProvisionCancellation/encode.cjs');
var encode$b = require('../LiquidityProvisionAmendment/encode.cjs');
var encode$c = require('../Transfer/encode.cjs');
var encode$d = require('../CancelTransfer/encode.cjs');
var encode$e = require('../AnnounceNode/encode.cjs');
var encode$f = require('../BatchMarketInstructions/encode.cjs');
var encode$g = require('../StopOrdersSubmission/encode.cjs');
var encode$h = require('../StopOrdersCancellation/encode.cjs');
var encode$i = require('../NodeVote/encode.cjs');
var encode$j = require('../NodeSignature/encode.cjs');
var encode$k = require('../ChainEvent/encode.cjs');
var encode$l = require('../KeyRotateSubmission/encode.cjs');
var encode$m = require('../StateVariableProposal/encode.cjs');
var encode$n = require('../ValidatorHeartbeat/encode.cjs');
var encode$o = require('../EthereumKeyRotateSubmission/encode.cjs');
var encode$p = require('../ProtocolUpgradeProposal/encode.cjs');
var encode$q = require('../IssueSignatures/encode.cjs');
var encode$r = require('../OracleDataSubmission/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.nonce) writer.varint(1, obj.nonce, types.uint64);
  if (obj.blockHeight) writer.varint(2, obj.blockHeight, types.uint64);

  if (obj.command?.orderSubmission ?? obj.orderSubmission)
    writer.bytes(
      1001,
      encode$1.encode(
        obj.command?.orderSubmission ?? obj.orderSubmission
      )
    );
  if (obj.command?.orderCancellation ?? obj.orderCancellation)
    writer.bytes(
      1002,
      encode$2.encode(
        obj.command?.orderCancellation ?? obj.orderCancellation
      )
    );
  if (obj.command?.orderAmendment ?? obj.orderAmendment)
    writer.bytes(
      1003,
      encode$3.encode(
        obj.command?.orderAmendment ?? obj.orderAmendment
      )
    );
  if (obj.command?.withdrawSubmission ?? obj.withdrawSubmission)
    writer.bytes(
      1004,
      encode$4.encode(
        obj.command?.withdrawSubmission ?? obj.withdrawSubmission
      )
    );
  if (obj.command?.proposalSubmission ?? obj.proposalSubmission)
    writer.bytes(
      1005,
      encode$5.encode(
        obj.command?.proposalSubmission ?? obj.proposalSubmission
      )
    );
  if (obj.command?.voteSubmission ?? obj.voteSubmission)
    writer.bytes(
      1006,
      encode$6.encode(
        obj.command?.voteSubmission ?? obj.voteSubmission
      )
    );
  if (
    obj.command?.liquidityProvisionSubmission ??
    obj.liquidityProvisionSubmission
  )
    writer.bytes(
      1007,
      encode$7.encode(
        obj.command?.liquidityProvisionSubmission ??
          obj.liquidityProvisionSubmission
      )
    );
  if (obj.command?.delegateSubmission ?? obj.delegateSubmission)
    writer.bytes(
      1008,
      encode$8.encode(
        obj.command?.delegateSubmission ?? obj.delegateSubmission
      )
    );
  if (obj.command?.undelegateSubmission ?? obj.undelegateSubmission)
    writer.bytes(
      1009,
      encode$9.encode(
        obj.command?.undelegateSubmission ?? obj.undelegateSubmission
      )
    );
  if (
    obj.command?.liquidityProvisionCancellation ??
    obj.liquidityProvisionCancellation
  )
    writer.bytes(
      1010,
      encode$a.encode(
        obj.command?.liquidityProvisionCancellation ??
          obj.liquidityProvisionCancellation
      )
    );
  if (
    obj.command?.liquidityProvisionAmendment ??
    obj.liquidityProvisionAmendment
  )
    writer.bytes(
      1011,
      encode$b.encode(
        obj.command?.liquidityProvisionAmendment ??
          obj.liquidityProvisionAmendment
      )
    );
  if (obj.command?.transfer ?? obj.transfer)
    writer.bytes(
      1012,
      encode$c.encode(obj.command?.transfer ?? obj.transfer)
    );
  if (obj.command?.cancelTransfer ?? obj.cancelTransfer)
    writer.bytes(
      1013,
      encode$d.encode(
        obj.command?.cancelTransfer ?? obj.cancelTransfer
      )
    );
  if (obj.command?.announceNode ?? obj.announceNode)
    writer.bytes(
      1014,
      encode$e.encode(
        obj.command?.announceNode ?? obj.announceNode
      )
    );
  if (obj.command?.batchMarketInstructions ?? obj.batchMarketInstructions)
    writer.bytes(
      1015,
      encode$f.encode(
        obj.command?.batchMarketInstructions ?? obj.batchMarketInstructions
      )
    );
  if (obj.command?.stopOrdersSubmission ?? obj.stopOrdersSubmission)
    writer.bytes(
      1016,
      encode$g.encode(
        obj.command?.stopOrdersSubmission ?? obj.stopOrdersSubmission
      )
    );
  if (obj.command?.stopOrdersCancellation ?? obj.stopOrdersCancellation)
    writer.bytes(
      1017,
      encode$h.encode(
        obj.command?.stopOrdersCancellation ?? obj.stopOrdersCancellation
      )
    );
  if (obj.command?.nodeVote ?? obj.nodeVote)
    writer.bytes(
      2002,
      encode$i.encode(obj.command?.nodeVote ?? obj.nodeVote)
    );
  if (obj.command?.nodeSignature ?? obj.nodeSignature)
    writer.bytes(
      2003,
      encode$j.encode(
        obj.command?.nodeSignature ?? obj.nodeSignature
      )
    );
  if (obj.command?.chainEvent ?? obj.chainEvent)
    writer.bytes(
      2004,
      encode$k.encode(
        obj.command?.chainEvent ?? obj.chainEvent
      )
    );
  if (obj.command?.keyRotateSubmission ?? obj.keyRotateSubmission)
    writer.bytes(
      2005,
      encode$l.encode(
        obj.command?.keyRotateSubmission ?? obj.keyRotateSubmission
      )
    );
  if (obj.command?.stateVariableProposal ?? obj.stateVariableProposal)
    writer.bytes(
      2006,
      encode$m.encode(
        obj.command?.stateVariableProposal ?? obj.stateVariableProposal
      )
    );
  if (obj.command?.validatorHeartbeat ?? obj.validatorHeartbeat)
    writer.bytes(
      2007,
      encode$n.encode(
        obj.command?.validatorHeartbeat ?? obj.validatorHeartbeat
      )
    );
  if (
    obj.command?.ethereumKeyRotateSubmission ??
    obj.ethereumKeyRotateSubmission
  )
    writer.bytes(
      2008,
      encode$o.encode(
        obj.command?.ethereumKeyRotateSubmission ??
          obj.ethereumKeyRotateSubmission
      )
    );
  if (obj.command?.protocolUpgradeProposal ?? obj.protocolUpgradeProposal)
    writer.bytes(
      2009,
      encode$p.encode(
        obj.command?.protocolUpgradeProposal ?? obj.protocolUpgradeProposal
      )
    );
  if (obj.command?.issueSignatures ?? obj.issueSignatures)
    writer.bytes(
      2010,
      encode$q.encode(
        obj.command?.issueSignatures ?? obj.issueSignatures
      )
    );
  if (obj.command?.oracleDataSubmission ?? obj.oracleDataSubmission)
    writer.bytes(
      3001,
      encode$r.encode(
        obj.command?.oracleDataSubmission ?? obj.oracleDataSubmission
      )
    );

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
