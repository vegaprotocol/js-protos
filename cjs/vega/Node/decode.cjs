'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var decode$4 = require('../EpochData/decode.cjs');
var NodeStatus = require('../NodeStatus.cjs');
var decode$3 = require('../Delegation/decode.cjs');
var decode$2 = require('../RewardScore/decode.cjs');
var decode$1 = require('../RankingScore/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = '';
  let field$pubKey = '';
  let field$tmPubKey = '';
  let field$ethereumAddress = '';
  let field$infoUrl = '';
  let field$location = '';
  let field$stakedByOperator = '';
  let field$stakedByDelegates = '';
  let field$stakedTotal = '';
  let field$maxIntendedStake = '';
  let field$pendingStake = '';
  let field$epochData = {};
  let field$status = 0;
  const field$delegations = [];
  let field$rewardScore = {};
  let field$rankingScore = {};
  let field$name = '';
  let field$avatarUrl = '';
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = types.string(data);
        break

      case 2:
        field$pubKey = types.string(data);
        break

      case 3:
        field$tmPubKey = types.string(data);
        break

      case 4:
        field$ethereumAddress = types.string(data);
        break

      case 5:
        field$infoUrl = types.string(data);
        break

      case 6:
        field$location = types.string(data);
        break

      case 7:
        field$stakedByOperator = types.string(data);
        break

      case 8:
        field$stakedByDelegates = types.string(data);
        break

      case 9:
        field$stakedTotal = types.string(data);
        break

      case 10:
        field$maxIntendedStake = types.string(data);
        break

      case 11:
        field$pendingStake = types.string(data);
        break

      case 12:
        field$epochData = decode$4.decode(data);
        break

      case 13:
        field$status = NodeStatus.decode(data);
        break

      case 14:
        field$delegations.push(decode$3.decode(data));
        break

      case 15:
        field$rewardScore = decode$2.decode(data);
        break

      case 16:
        field$rankingScore = decode$1.decode(data);
        break

      case 17:
        field$name = types.string(data);
        break

      case 18:
        field$avatarUrl = types.string(data);
        break
    }
  }
  return {
    id: field$id,
    pubKey: field$pubKey,
    tmPubKey: field$tmPubKey,
    ethereumAddress: field$ethereumAddress,
    infoUrl: field$infoUrl,
    location: field$location,
    stakedByOperator: field$stakedByOperator,
    stakedByDelegates: field$stakedByDelegates,
    stakedTotal: field$stakedTotal,
    maxIntendedStake: field$maxIntendedStake,
    pendingStake: field$pendingStake,
    epochData: field$epochData,
    status: field$status,
    delegations: field$delegations,
    rewardScore: field$rewardScore,
    rankingScore: field$rankingScore,
    name: field$name,
    avatarUrl: field$avatarUrl
  }
}

exports.decode = decode;
