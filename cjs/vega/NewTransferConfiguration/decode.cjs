'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var AccountType = require('../AccountType.cjs');
var GovernanceTransferType = require('../GovernanceTransferType.cjs');
var decode$2 = require('../OneOffTransfer/decode.cjs');
var decode$1 = require('../RecurringTransfer/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$sourceType = 0;
  let field$source = '';
  let field$transferType = 0;
  let field$amount = '';
  let field$asset = '';
  let field$fractionOfBalance = '';
  let field$destinationType = 0;
  let field$destination = '';
  let field$kind = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$sourceType = AccountType.decode(data);
        break

      case 2:
        field$source = types.string(data);
        break

      case 3:
        field$transferType = GovernanceTransferType.decode(data);
        break

      case 4:
        field$amount = types.string(data);
        break

      case 5:
        field$asset = types.string(data);
        break

      case 6:
        field$fractionOfBalance = types.string(data);
        break

      case 7:
        field$destinationType = AccountType.decode(data);
        break

      case 8:
        field$destination = types.string(data);
        break

      case 101:
        field$kind = { oneOff: decode$2.decode(data) };
        break

      case 102:
        field$kind = { recurring: decode$1.decode(data) };
        break
    }
  }
  return {
    sourceType: field$sourceType,
    source: field$source,
    transferType: field$transferType,
    amount: field$amount,
    asset: field$asset,
    fractionOfBalance: field$fractionOfBalance,
    destinationType: field$destinationType,
    destination: field$destination,
    kind: field$kind
  }
}

exports.decode = decode;
