'use strict';

var assert = require('nanoassert');
var types = require('protobuf-codec/encode/types');
var types$1 = require('protobuf-codec/decode/types');

/// autogenerated by protoc-plugin-js

const STATE_UNSPECIFIED = 0;
const STATE_FAILED = 1;
const STATE_OPEN = 2;
const STATE_PASSED = 3;
const STATE_REJECTED = 4;
const STATE_DECLINED = 5;
const STATE_ENACTED = 6;
const STATE_WAITING_FOR_NODE_VOTE = 7;

const enumValues = new Map([
  [0, 'STATE_UNSPECIFIED'],
  [1, 'STATE_FAILED'],
  [2, 'STATE_OPEN'],
  [3, 'STATE_PASSED'],
  [4, 'STATE_REJECTED'],
  [5, 'STATE_DECLINED'],
  [6, 'STATE_ENACTED'],
  [7, 'STATE_WAITING_FOR_NODE_VOTE']
]);
const enumNames = new Map([
  ['STATE_UNSPECIFIED', 0],
  ['STATE_FAILED', 1],
  ['STATE_OPEN', 2],
  ['STATE_PASSED', 3],
  ['STATE_REJECTED', 4],
  ['STATE_DECLINED', 5],
  ['STATE_ENACTED', 6],
  ['STATE_WAITING_FOR_NODE_VOTE', 7]
]);

function encode(value, buf, byteOffset = 0) {
  if (typeof value === 'string') return encode(parse(value), buf, byteOffset)
  if (value == null) throw new Error('Invalid State value (' + value + ')')

  return types.enumerable.encode(value, buf, byteOffset)
}

function decode(varint) {
  const int = types$1.enumerable(varint);

  return stringify(int) ?? int
}

function encodingLength(value) {
  if (typeof value === 'string') return encodingLength(parse(value))
  assert(value != null, 'Invalid State value (' + value + ')');

  if (0 <= value && value <= 7) return 1

  // enumerable max value in case of unknown value
  return 5
}

/**
 * Convert an enum value to it's human readable name.
 * Returns undefined on an unknown value.
 */
function stringify(int) {
  return enumValues.get(int)
}

/**
 * Convert an enum string names to it's machine integer value.
 * Returns undefined on an unknown name.
 */
function parse(str) {
  return enumNames.get(str)
}

exports.STATE_DECLINED = STATE_DECLINED;
exports.STATE_ENACTED = STATE_ENACTED;
exports.STATE_FAILED = STATE_FAILED;
exports.STATE_OPEN = STATE_OPEN;
exports.STATE_PASSED = STATE_PASSED;
exports.STATE_REJECTED = STATE_REJECTED;
exports.STATE_UNSPECIFIED = STATE_UNSPECIFIED;
exports.STATE_WAITING_FOR_NODE_VOTE = STATE_WAITING_FOR_NODE_VOTE;
exports.decode = decode;
exports.encode = encode;
exports.encodingLength = encodingLength;
exports.parse = parse;
exports.stringify = stringify;
