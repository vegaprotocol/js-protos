'use strict';

var reader = require('protobuf-codec/decode/reader');
var types = require('protobuf-codec/decode/types');
var State = require('./State.cjs');
var decode$2 = require('../ProposalTerms/decode.cjs');
var ProposalError = require('../ProposalError.cjs');
var decode$1 = require('../ProposalRationale/decode.cjs');

/// autogenerated by protoc-plugin-js

function decode(buf, byteOffset = 0, byteLength = buf.byteLength) {
  let field$id = '';
  let field$reference = '';
  let field$partyId = '';
  let field$state = 0;
  let field$timestamp = 0n;
  let field$terms = {};
  let field$reason = null;
  let field$errorDetails = null;
  let field$rationale = {};
  let field$requiredParticipation = '';
  let field$requiredMajority = '';
  let field$requiredLiquidityProviderParticipation = null;
  let field$requiredLiquidityProviderMajority = null;
  for (const [field, { data }] of reader(buf, byteOffset, byteLength)) {
    switch (field) {
      case 1:
        field$id = types.string(data);
        break

      case 2:
        field$reference = types.string(data);
        break

      case 3:
        field$partyId = types.string(data);
        break

      case 4:
        field$state = State.decode(data);
        break

      case 5:
        field$timestamp = types.int64(data);
        break

      case 6:
        field$terms = decode$2.decode(data);
        break

      case 7:
        field$reason = ProposalError.decode(data);
        break

      case 8:
        field$errorDetails = types.string(data);
        break

      case 9:
        field$rationale = decode$1.decode(data);
        break

      case 10:
        field$requiredParticipation = types.string(data);
        break

      case 11:
        field$requiredMajority = types.string(data);
        break

      case 12:
        field$requiredLiquidityProviderParticipation = types.string(data);
        break

      case 13:
        field$requiredLiquidityProviderMajority = types.string(data);
        break
    }
  }
  return {
    id: field$id,
    reference: field$reference,
    partyId: field$partyId,
    state: field$state,
    timestamp: field$timestamp,
    terms: field$terms,
    reason: field$reason,
    errorDetails: field$errorDetails,
    rationale: field$rationale,
    requiredParticipation: field$requiredParticipation,
    requiredMajority: field$requiredMajority,
    requiredLiquidityProviderParticipation:
      field$requiredLiquidityProviderParticipation,
    requiredLiquidityProviderMajority: field$requiredLiquidityProviderMajority
  }
}

exports.decode = decode;
