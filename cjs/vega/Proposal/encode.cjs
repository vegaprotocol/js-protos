'use strict';

var Writer = require('protobuf-codec/encode/writer');
var types = require('protobuf-codec/encode/types');
var State = require('./State.cjs');
var encode$1 = require('../ProposalTerms/encode.cjs');
var ProposalError = require('../ProposalError.cjs');
var encode$2 = require('../ProposalRationale/encode.cjs');

/// autogenerated by protoc-plugin-js

function encode(obj = {}, buf, byteOffset = 0) {
  const writer = new Writer();

  if (obj.id) writer.bytes(1, obj.id, types.string);
  if (obj.reference) writer.bytes(2, obj.reference, types.string);
  if (obj.partyId) writer.bytes(3, obj.partyId, types.string);
  if (obj.state) writer.varint(4, obj.state, State);
  if (obj.timestamp) writer.varint(5, obj.timestamp, types.int64);
  if (obj.terms) writer.bytes(6, encode$1.encode(obj.terms));
  if (obj.reason) writer.varint(7, obj.reason, ProposalError);
  if (obj.errorDetails) writer.bytes(8, obj.errorDetails, types.string);
  if (obj.rationale)
    writer.bytes(9, encode$2.encode(obj.rationale));
  if (obj.requiredParticipation)
    writer.bytes(10, obj.requiredParticipation, types.string);
  if (obj.requiredMajority) writer.bytes(11, obj.requiredMajority, types.string);
  if (obj.requiredLiquidityProviderParticipation)
    writer.bytes(12, obj.requiredLiquidityProviderParticipation, types.string);
  if (obj.requiredLiquidityProviderMajority)
    writer.bytes(13, obj.requiredLiquidityProviderMajority, types.string);

  return writer.concat(buf, byteOffset)
}

// export function encodingLength (obj) {
//   throw new Error('Unimplemented')
// }

exports.encode = encode;
